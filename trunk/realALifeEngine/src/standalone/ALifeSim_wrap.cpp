/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AgentVisualDebugger swig_types[0]
#define SWIGTYPE_p_Car swig_types[1]
#define SWIGTYPE_p_LearningEntity swig_types[2]
#define SWIGTYPE_p_OIS__Keyboard swig_types[3]
#define SWIGTYPE_p_OIS__Mouse swig_types[4]
#define SWIGTYPE_p_Ogre__FrameEvent swig_types[5]
#define SWIGTYPE_p_Ogre__FrameListener swig_types[6]
#define SWIGTYPE_p_Ogre__SceneManager swig_types[7]
#define SWIGTYPE_p_Ogre__SceneNode swig_types[8]
#define SWIGTYPE_p_PhysicalCamera swig_types[9]
#define SWIGTYPE_p_PhysicalCamera__Type swig_types[10]
#define SWIGTYPE_p_PhysicalEntity swig_types[11]
#define SWIGTYPE_p_Point3r swig_types[12]
#define SWIGTYPE_p_Robot swig_types[13]
#define SWIGTYPE_p_SimulationEngine swig_types[14]
#define SWIGTYPE_p_Vec3r swig_types[15]
#define SWIGTYPE_p_bool swig_types[16]
#define SWIGTYPE_p_float swig_types[17]
#define SWIGTYPE_p_opal__CollisionEvent swig_types[18]
#define SWIGTYPE_p_opal__CollisionEventHandler swig_types[19]
#define SWIGTYPE_p_opal__EventHandler swig_types[20]
#define SWIGTYPE_p_opal__GearedMotor swig_types[21]
#define SWIGTYPE_p_opal__Matrix44r swig_types[22]
#define SWIGTYPE_p_opal__Point3r swig_types[23]
#define SWIGTYPE_p_opal__Simulator swig_types[24]
#define SWIGTYPE_p_opal__Solid swig_types[25]
#define SWIGTYPE_p_opal__Vec3r swig_types[26]
#define SWIGTYPE_p_real swig_types[27]
#define SWIGTYPE_p_std__string swig_types[28]
#define SWIGTYPE_p_unsigned_char swig_types[29]
#define SWIGTYPE_p_unsigned_int swig_types[30]
#define SWIGTYPE_p_unsigned_short swig_types[31]
#define SWIGTYPE_p_verve__Agent swig_types[32]
#define SWIGTYPE_p_verve__AgentDebugData swig_types[33]
#define SWIGTYPE_p_verve__AgentDescriptor swig_types[34]
#define SWIGTYPE_p_verve__ContinuousSensorDescriptor swig_types[35]
#define SWIGTYPE_p_verve__DiscreteSensorDescriptor swig_types[36]
#define SWIGTYPE_p_verve__Observation swig_types[37]
static swig_type_info *swig_types[39];
static swig_module_info swig_module = {swig_types, 38, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "al"
#define SWIG_init      luaopen_al
#define SWIG_init_user luaopen_al_user

#define SWIG_LUACODE   luaopen_al_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR;
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR);
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			lua_pushfstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			lua_pushstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			lua_pushstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			lua_pushstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			lua_pushstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(int,int);
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int);
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short);
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short);
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long);
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long);
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float);
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double);

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		lua_pushfstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		lua_pushfstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		lua_pushstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		lua_pushstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		lua_pushfstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


/* Includes the header in the wrapper code */
#include <SDL/SDL.h>
#include <OGRE/Ogre.h>
#include <opal/opal.h>
//#include <audiere.h>

#include <verve/Agent.h>
#include <verve/apps/SimulationEngine.h>
#include <verve/apps/Robot.h>
#include <verve/apps/Car.h>
#include <verve/apps/AgentVisualDebugger.h>
//#include "verve/apps/AudioManager.h"
#include <verve/apps/DataCollection.h>
#include <verve/apps/DataFile.h>
#include <verve/apps/LearningTest.h>
#include <verve/apps/PhysicalCamera.h>
#include <verve/apps/PhysicalEntity.h>
#include <verve/apps/Timer.h>

using namespace opal;
//using namespace Ogre;

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_EventHandler(lua_State* L) {
  int SWIG_arg = 0;
  opal::EventHandler *result = 0 ;
  
  SWIG_check_num_args("opal::EventHandler",0,0)
  result = (opal::EventHandler *)new opal::EventHandler();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__EventHandler,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventHandler(void *obj) {
opal::EventHandler *arg1 = (opal::EventHandler *) obj;
delete arg1;
}
static swig_lua_method swig_opal_EventHandler_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_opal_EventHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_opal_EventHandler_bases[] = {0};
static const char *swig_opal_EventHandler_base_names[] = {0};
static swig_lua_class _wrap_class_opal_EventHandler = { "EventHandler", &SWIGTYPE_p_opal__EventHandler,_wrap_new_EventHandler, swig_delete_EventHandler, swig_opal_EventHandler_methods, swig_opal_EventHandler_attributes, swig_opal_EventHandler_bases, swig_opal_EventHandler_base_names };

static int _wrap_new_CollisionEvent(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *result = 0 ;
  
  SWIG_check_num_args("opal::CollisionEvent",0,0)
  result = (opal::CollisionEvent *)new opal::CollisionEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__CollisionEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_thisSolid_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  opal::Solid *arg2 = (opal::Solid *) 0 ;
  
  SWIG_check_num_args("thisSolid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("thisSolid",1,"opal::CollisionEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("thisSolid",2,"opal::Solid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_thisSolid_set",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__Solid,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionEvent_thisSolid_set",2,SWIGTYPE_p_opal__Solid);
  }
  
  if (arg1) (arg1)->thisSolid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_thisSolid_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  opal::Solid *result = 0 ;
  
  SWIG_check_num_args("thisSolid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("thisSolid",1,"opal::CollisionEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_thisSolid_get",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  result = (opal::Solid *) ((arg1)->thisSolid);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Solid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_otherSolid_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  opal::Solid *arg2 = (opal::Solid *) 0 ;
  
  SWIG_check_num_args("otherSolid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("otherSolid",1,"opal::CollisionEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("otherSolid",2,"opal::Solid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_otherSolid_set",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__Solid,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollisionEvent_otherSolid_set",2,SWIGTYPE_p_opal__Solid);
  }
  
  if (arg1) (arg1)->otherSolid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_otherSolid_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  opal::Solid *result = 0 ;
  
  SWIG_check_num_args("otherSolid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("otherSolid",1,"opal::CollisionEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_otherSolid_get",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  result = (opal::Solid *) ((arg1)->otherSolid);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Solid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  Point3r arg2 ;
  Point3r *argp2 ;
  
  SWIG_check_num_args("pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pos",1,"opal::CollisionEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pos",2,"Point3r");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_pos_set",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Point3r,0))){
    SWIG_fail_ptr("CollisionEvent_pos_set",2,SWIGTYPE_p_Point3r);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  Point3r result;
  
  SWIG_check_num_args("pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pos",1,"opal::CollisionEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_pos_get",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  result =  ((arg1)->pos);
  {
    Point3r * resultptr = new Point3r((const Point3r &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Point3r,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_normal_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  Vec3r arg2 ;
  Vec3r *argp2 ;
  
  SWIG_check_num_args("normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normal",1,"opal::CollisionEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("normal",2,"Vec3r");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_normal_set",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Vec3r,0))){
    SWIG_fail_ptr("CollisionEvent_normal_set",2,SWIGTYPE_p_Vec3r);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->normal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_normal_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  Vec3r result;
  
  SWIG_check_num_args("normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normal",1,"opal::CollisionEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_normal_get",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  result =  ((arg1)->normal);
  {
    Vec3r * resultptr = new Vec3r((const Vec3r &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vec3r,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_depth_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  real arg2 ;
  real *argp2 ;
  
  SWIG_check_num_args("depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("depth",1,"opal::CollisionEvent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("depth",2,"real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_depth_set",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_real,0))){
    SWIG_fail_ptr("CollisionEvent_depth_set",2,SWIGTYPE_p_real);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->depth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEvent_depth_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEvent *arg1 = (opal::CollisionEvent *) 0 ;
  real result;
  
  SWIG_check_num_args("depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("depth",1,"opal::CollisionEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEvent_depth_get",1,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  result =  ((arg1)->depth);
  {
    real * resultptr = new real((const real &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_real,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionEvent(void *obj) {
opal::CollisionEvent *arg1 = (opal::CollisionEvent *) obj;
delete arg1;
}
static swig_lua_method swig_opal_CollisionEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_opal_CollisionEvent_attributes[] = {
    { "thisSolid", _wrap_CollisionEvent_thisSolid_get, _wrap_CollisionEvent_thisSolid_set},
    { "otherSolid", _wrap_CollisionEvent_otherSolid_get, _wrap_CollisionEvent_otherSolid_set},
    { "pos", _wrap_CollisionEvent_pos_get, _wrap_CollisionEvent_pos_set},
    { "normal", _wrap_CollisionEvent_normal_get, _wrap_CollisionEvent_normal_set},
    { "depth", _wrap_CollisionEvent_depth_get, _wrap_CollisionEvent_depth_set},
    {0,0,0}
};
static swig_lua_class *swig_opal_CollisionEvent_bases[] = {0};
static const char *swig_opal_CollisionEvent_base_names[] = {0};
static swig_lua_class _wrap_class_opal_CollisionEvent = { "CollisionEvent", &SWIGTYPE_p_opal__CollisionEvent,_wrap_new_CollisionEvent, swig_delete_CollisionEvent, swig_opal_CollisionEvent_methods, swig_opal_CollisionEvent_attributes, swig_opal_CollisionEvent_bases, swig_opal_CollisionEvent_base_names };

static int _wrap_CollisionEventHandler_handleCollisionEvent(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEventHandler *arg1 = (opal::CollisionEventHandler *) 0 ;
  opal::CollisionEvent *arg2 = 0 ;
  
  SWIG_check_num_args("handleCollisionEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("handleCollisionEvent",1,"opal::CollisionEventHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("handleCollisionEvent",2,"opal::CollisionEvent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEventHandler,0))){
    SWIG_fail_ptr("CollisionEventHandler_handleCollisionEvent",1,SWIGTYPE_p_opal__CollisionEventHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEventHandler_handleCollisionEvent",2,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  (arg1)->handleCollisionEvent((opal::CollisionEvent const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEventHandler_internal_pushCollisionEvent(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEventHandler *arg1 = (opal::CollisionEventHandler *) 0 ;
  opal::CollisionEvent *arg2 = 0 ;
  
  SWIG_check_num_args("internal_pushCollisionEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("internal_pushCollisionEvent",1,"opal::CollisionEventHandler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("internal_pushCollisionEvent",2,"opal::CollisionEvent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEventHandler,0))){
    SWIG_fail_ptr("CollisionEventHandler_internal_pushCollisionEvent",1,SWIGTYPE_p_opal__CollisionEventHandler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("CollisionEventHandler_internal_pushCollisionEvent",2,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  (arg1)->internal_pushCollisionEvent((opal::CollisionEvent const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionEventHandler_internal_handlePendingCollisionEvents(lua_State* L) {
  int SWIG_arg = 0;
  opal::CollisionEventHandler *arg1 = (opal::CollisionEventHandler *) 0 ;
  
  SWIG_check_num_args("internal_handlePendingCollisionEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("internal_handlePendingCollisionEvents",1,"opal::CollisionEventHandler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__CollisionEventHandler,0))){
    SWIG_fail_ptr("CollisionEventHandler_internal_handlePendingCollisionEvents",1,SWIGTYPE_p_opal__CollisionEventHandler);
  }
  
  (arg1)->internal_handlePendingCollisionEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionEventHandler(void *obj) {
opal::CollisionEventHandler *arg1 = (opal::CollisionEventHandler *) obj;
delete arg1;
}
static swig_lua_method swig_opal_CollisionEventHandler_methods[] = {
    {"handleCollisionEvent", _wrap_CollisionEventHandler_handleCollisionEvent}, 
    {"internal_pushCollisionEvent", _wrap_CollisionEventHandler_internal_pushCollisionEvent}, 
    {"internal_handlePendingCollisionEvents", _wrap_CollisionEventHandler_internal_handlePendingCollisionEvents}, 
    {0,0}
};
static swig_lua_attribute swig_opal_CollisionEventHandler_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_opal_CollisionEventHandler_bases[] = {0,0};
static const char *swig_opal_CollisionEventHandler_base_names[] = {"opal::EventHandler *",0};
static swig_lua_class _wrap_class_opal_CollisionEventHandler = { "CollisionEventHandler", &SWIGTYPE_p_opal__CollisionEventHandler,0, swig_delete_CollisionEventHandler, swig_opal_CollisionEventHandler_methods, swig_opal_CollisionEventHandler_attributes, swig_opal_CollisionEventHandler_bases, swig_opal_CollisionEventHandler_base_names };

static int _wrap_OPAL_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::real result;
  
  SWIG_check_num_args("opal::globals::OPAL_PI",0,0)
  result = (opal::real)(opal::real)opal::globals::OPAL_PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OPAL_HALF_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::real result;
  
  SWIG_check_num_args("opal::globals::OPAL_HALF_PI",0,0)
  result = (opal::real)(opal::real)opal::globals::OPAL_HALF_PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OPAL_ONE_THIRD_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::real result;
  
  SWIG_check_num_args("opal::globals::OPAL_ONE_THIRD",0,0)
  result = (opal::real)(opal::real)opal::globals::OPAL_ONE_THIRD;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OPAL_EPSILON_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::real result;
  
  SWIG_check_num_args("opal::globals::OPAL_EPSILON",0,0)
  result = (opal::real)(opal::real)opal::globals::OPAL_EPSILON;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_degToRad(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real result;
  
  SWIG_check_num_args("opal::degToRad",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::degToRad",1,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  result = (opal::real)opal::degToRad(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_radToDeg(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real result;
  
  SWIG_check_num_args("opal::radToDeg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::radToDeg",1,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  result = (opal::real)opal::radToDeg(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real result;
  
  SWIG_check_num_args("opal::abs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::abs",1,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  result = (opal::real)opal::abs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_areEqual(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real arg2 ;
  bool result;
  
  SWIG_check_num_args("opal::areEqual",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::areEqual",1,"opal::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("opal::areEqual",2,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  arg2 = (opal::real)lua_tonumber(L, 2);
  result = (bool)opal::areEqual(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_normalizeDegrees(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real result;
  
  SWIG_check_num_args("opal::normalizeDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::normalizeDegrees",1,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  result = (opal::real)opal::normalizeDegrees(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_x_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"opal::Point3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_x_set",1,SWIGTYPE_p_opal__Point3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_x_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"opal::Point3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_x_get",1,SWIGTYPE_p_opal__Point3r);
  }
  
  result = (opal::real) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_y_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"opal::Point3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_y_set",1,SWIGTYPE_p_opal__Point3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_y_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"opal::Point3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_y_get",1,SWIGTYPE_p_opal__Point3r);
  }
  
  result = (opal::real) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_z_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"opal::Point3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_z_set",1,SWIGTYPE_p_opal__Point3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_z_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"opal::Point3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_z_get",1,SWIGTYPE_p_opal__Point3r);
  }
  
  result = (opal::real) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point3r__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *result = 0 ;
  
  SWIG_check_num_args("opal::Point3r",0,0)
  result = (opal::Point3r *)new opal::Point3r();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Point3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point3r__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = 0 ;
  opal::Point3r *result = 0 ;
  
  SWIG_check_num_args("opal::Point3r",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("opal::Point3r",1,"opal::Point3r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("new_Point3r",1,SWIGTYPE_p_opal__Point3r);
  }
  
  result = (opal::Point3r *)new opal::Point3r((opal::Point3r const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Point3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point3r__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real arg2 ;
  opal::real arg3 ;
  opal::Point3r *result = 0 ;
  
  SWIG_check_num_args("opal::Point3r",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::Point3r",1,"opal::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("opal::Point3r",2,"opal::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("opal::Point3r",3,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  arg2 = (opal::real)lua_tonumber(L, 2);
  arg3 = (opal::real)lua_tonumber(L, 3);
  result = (opal::Point3r *)new opal::Point3r(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Point3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point3r__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  opal::real *arg1 = (opal::real *) 0 ;
  opal::real temp1 ;
  opal::Point3r *result = 0 ;
  
  SWIG_check_num_args("opal::Point3r",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::Point3r",1,"opal::real const *");
  temp1 = (opal::real)lua_tonumber(L,1);
  arg1 = &temp1; 
  result = (opal::Point3r *)new opal::Point3r((opal::real const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Point3r,1); SWIG_arg++; 
  lua_pushnumber(L, (lua_Number) *arg1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point3r(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Point3r__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Point3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Point3r__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Point3r__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Point3r__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Point3r'\n"
    "  Possible C/C++ prototypes are:\n"
    "    opal::Point3r()\n"
    "    opal::Point3r(opal::Point3r const &)\n"
    "    opal::Point3r(opal::real,opal::real,opal::real)\n"
    "    opal::Point3r(opal::real const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Point3r_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real arg2 ;
  opal::real arg3 ;
  opal::real arg4 ;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"opal::Point3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"opal::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"opal::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_set",1,SWIGTYPE_p_opal__Point3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  arg3 = (opal::real)lua_tonumber(L, 3);
  arg4 = (opal::real)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::real *arg2 = (opal::real *) 0 ;
  opal::real temp2 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"opal::Point3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"opal::real *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r_set",1,SWIGTYPE_p_opal__Point3r);
  }
  
  temp2 = (opal::real)lua_tonumber(L,2);
  arg2 = &temp2; 
  (arg1)->set(arg2);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point3r_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Point3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Point3r_set__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Point3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Point3r_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Point3r_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(opal::Point3r *,opal::real,opal::real,opal::real)\n"
    "    set(opal::Point3r *,opal::real *)\n");
  lua_error(L);return 0;
}


static int _wrap_Point3r___eq(lua_State* L) {
  int SWIG_arg = 0;
  opal::Point3r *arg1 = (opal::Point3r *) 0 ;
  opal::Point3r *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"opal::Point3r const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"opal::Point3r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r___eq",1,SWIGTYPE_p_opal__Point3r);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__Point3r,0))){
    SWIG_fail_ptr("Point3r___eq",2,SWIGTYPE_p_opal__Point3r);
  }
  
  result = (bool)((opal::Point3r const *)arg1)->operator ==((opal::Point3r const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Point3r(void *obj) {
opal::Point3r *arg1 = (opal::Point3r *) obj;
delete arg1;
}
static swig_lua_method swig_opal_Point3r_methods[] = {
    {"set", _wrap_Point3r_set}, 
    {"__eq", _wrap_Point3r___eq}, 
    {0,0}
};
static swig_lua_attribute swig_opal_Point3r_attributes[] = {
    { "x", _wrap_Point3r_x_get, _wrap_Point3r_x_set},
    { "y", _wrap_Point3r_y_get, _wrap_Point3r_y_set},
    { "z", _wrap_Point3r_z_get, _wrap_Point3r_z_set},
    {0,0,0}
};
static swig_lua_class *swig_opal_Point3r_bases[] = {0};
static const char *swig_opal_Point3r_base_names[] = {0};
static swig_lua_class _wrap_class_opal_Point3r = { "Point3r", &SWIGTYPE_p_opal__Point3r,_wrap_new_Point3r, swig_delete_Point3r, swig_opal_Point3r_methods, swig_opal_Point3r_attributes, swig_opal_Point3r_bases, swig_opal_Point3r_base_names };

static int _wrap_Vec3r_x_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"opal::Vec3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_x_set",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_x_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"opal::Vec3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_x_get",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::real) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_y_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"opal::Vec3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_y_set",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_y_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"opal::Vec3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_y_get",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::real) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_z_set(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"opal::Vec3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_z_set",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_z_get(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"opal::Vec3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_z_get",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::real) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3r__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *result = 0 ;
  
  SWIG_check_num_args("opal::Vec3r",0,0)
  result = (opal::Vec3r *)new opal::Vec3r();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Vec3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3r__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = 0 ;
  opal::Vec3r *result = 0 ;
  
  SWIG_check_num_args("opal::Vec3r",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("opal::Vec3r",1,"opal::Vec3r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("new_Vec3r",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::Vec3r *)new opal::Vec3r((opal::Vec3r const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Vec3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3r__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  opal::real arg1 ;
  opal::real arg2 ;
  opal::real arg3 ;
  opal::Vec3r *result = 0 ;
  
  SWIG_check_num_args("opal::Vec3r",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::Vec3r",1,"opal::real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("opal::Vec3r",2,"opal::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("opal::Vec3r",3,"opal::real");
  arg1 = (opal::real)lua_tonumber(L, 1);
  arg2 = (opal::real)lua_tonumber(L, 2);
  arg3 = (opal::real)lua_tonumber(L, 3);
  result = (opal::Vec3r *)new opal::Vec3r(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Vec3r,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3r__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  opal::real *arg1 = (opal::real *) 0 ;
  opal::real temp1 ;
  opal::Vec3r *result = 0 ;
  
  SWIG_check_num_args("opal::Vec3r",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("opal::Vec3r",1,"opal::real const *");
  temp1 = (opal::real)lua_tonumber(L,1);
  arg1 = &temp1; 
  result = (opal::Vec3r *)new opal::Vec3r((opal::real const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Vec3r,1); SWIG_arg++; 
  lua_pushnumber(L, (lua_Number) *arg1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3r(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec3r__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Vec3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3r__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3r__SWIG_3(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec3r__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vec3r'\n"
    "  Possible C/C++ prototypes are:\n"
    "    opal::Vec3r()\n"
    "    opal::Vec3r(opal::Vec3r const &)\n"
    "    opal::Vec3r(opal::real,opal::real,opal::real)\n"
    "    opal::Vec3r(opal::real const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3r_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real arg2 ;
  opal::real arg3 ;
  opal::real arg4 ;
  
  SWIG_check_num_args("set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"opal::Vec3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"opal::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("set",3,"opal::real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("set",4,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_set",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  arg3 = (opal::real)lua_tonumber(L, 3);
  arg4 = (opal::real)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real *arg2 = (opal::real *) 0 ;
  opal::real temp2 ;
  
  SWIG_check_num_args("set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("set",1,"opal::Vec3r *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("set",2,"opal::real *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_set",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  temp2 = (opal::real)lua_tonumber(L,2);
  arg2 = &temp2; 
  (arg1)->set(arg2);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Vec3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3r_set__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_opal__Vec3r, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Vec3r_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vec3r_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(opal::Vec3r *,opal::real,opal::real,opal::real)\n"
    "    set(opal::Vec3r *,opal::real *)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3r_lengthSquared(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lengthSquared",1,"opal::Vec3r const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_lengthSquared",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::real)((opal::Vec3r const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_length(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"opal::Vec3r const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_length",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (opal::real)((opal::Vec3r const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_normalize(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"opal::Vec3r *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_normalize",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r_unit(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::Vec3r result;
  
  SWIG_check_num_args("unit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unit",1,"opal::Vec3r const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r_unit",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = ((opal::Vec3r const *)arg1)->unit();
  {
    opal::Vec3r * resultptr = new opal::Vec3r((const opal::Vec3r &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_opal__Vec3r,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3r___eq(lua_State* L) {
  int SWIG_arg = 0;
  opal::Vec3r *arg1 = (opal::Vec3r *) 0 ;
  opal::Vec3r *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"opal::Vec3r const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"opal::Vec3r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r___eq",1,SWIGTYPE_p_opal__Vec3r);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__Vec3r,0))){
    SWIG_fail_ptr("Vec3r___eq",2,SWIGTYPE_p_opal__Vec3r);
  }
  
  result = (bool)((opal::Vec3r const *)arg1)->operator ==((opal::Vec3r const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec3r(void *obj) {
opal::Vec3r *arg1 = (opal::Vec3r *) obj;
delete arg1;
}
static swig_lua_method swig_opal_Vec3r_methods[] = {
    {"set", _wrap_Vec3r_set}, 
    {"lengthSquared", _wrap_Vec3r_lengthSquared}, 
    {"length", _wrap_Vec3r_length}, 
    {"normalize", _wrap_Vec3r_normalize}, 
    {"unit", _wrap_Vec3r_unit}, 
    {"__eq", _wrap_Vec3r___eq}, 
    {0,0}
};
static swig_lua_attribute swig_opal_Vec3r_attributes[] = {
    { "x", _wrap_Vec3r_x_get, _wrap_Vec3r_x_set},
    { "y", _wrap_Vec3r_y_get, _wrap_Vec3r_y_set},
    { "z", _wrap_Vec3r_z_get, _wrap_Vec3r_z_set},
    {0,0,0}
};
static swig_lua_class *swig_opal_Vec3r_bases[] = {0};
static const char *swig_opal_Vec3r_base_names[] = {0};
static swig_lua_class _wrap_class_opal_Vec3r = { "Vec3r", &SWIGTYPE_p_opal__Vec3r,_wrap_new_Vec3r, swig_delete_Vec3r, swig_opal_Vec3r_methods, swig_opal_Vec3r_attributes, swig_opal_Vec3r_bases, swig_opal_Vec3r_base_names };

static int _wrap_FrameEvent_timeSinceLastEvent_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameEvent *arg1 = (Ogre::FrameEvent *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("timeSinceLastEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("timeSinceLastEvent",1,"Ogre::FrameEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("timeSinceLastEvent",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameEvent_timeSinceLastEvent_set",1,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeSinceLastEvent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameEvent_timeSinceLastEvent_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameEvent *arg1 = (Ogre::FrameEvent *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("timeSinceLastEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("timeSinceLastEvent",1,"Ogre::FrameEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameEvent_timeSinceLastEvent_get",1,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (Ogre::Real) ((arg1)->timeSinceLastEvent);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameEvent_timeSinceLastFrame_set(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameEvent *arg1 = (Ogre::FrameEvent *) 0 ;
  Ogre::Real arg2 ;
  
  SWIG_check_num_args("timeSinceLastFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("timeSinceLastFrame",1,"Ogre::FrameEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("timeSinceLastFrame",2,"Ogre::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameEvent_timeSinceLastFrame_set",1,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  arg2 = (Ogre::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeSinceLastFrame = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameEvent_timeSinceLastFrame_get(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameEvent *arg1 = (Ogre::FrameEvent *) 0 ;
  Ogre::Real result;
  
  SWIG_check_num_args("timeSinceLastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("timeSinceLastFrame",1,"Ogre::FrameEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameEvent_timeSinceLastFrame_get",1,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (Ogre::Real) ((arg1)->timeSinceLastFrame);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrameEvent(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameEvent *result = 0 ;
  
  SWIG_check_num_args("Ogre::FrameEvent::FrameEvent",0,0)
  result = (Ogre::FrameEvent *)new Ogre::FrameEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__FrameEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrameEvent(void *obj) {
Ogre::FrameEvent *arg1 = (Ogre::FrameEvent *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_FrameEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Ogre_FrameEvent_attributes[] = {
    { "timeSinceLastEvent", _wrap_FrameEvent_timeSinceLastEvent_get, _wrap_FrameEvent_timeSinceLastEvent_set},
    { "timeSinceLastFrame", _wrap_FrameEvent_timeSinceLastFrame_get, _wrap_FrameEvent_timeSinceLastFrame_set},
    {0,0,0}
};
static swig_lua_class *swig_Ogre_FrameEvent_bases[] = {0};
static const char *swig_Ogre_FrameEvent_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_FrameEvent = { "FrameEvent", &SWIGTYPE_p_Ogre__FrameEvent,_wrap_new_FrameEvent, swig_delete_FrameEvent, swig_Ogre_FrameEvent_methods, swig_Ogre_FrameEvent_attributes, swig_Ogre_FrameEvent_bases, swig_Ogre_FrameEvent_base_names };

static int _wrap_FrameListener_frameStarted(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameListener *arg1 = (Ogre::FrameListener *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("frameStarted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frameStarted",1,"Ogre::FrameListener *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("frameStarted",2,"Ogre::FrameEvent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameListener,0))){
    SWIG_fail_ptr("FrameListener_frameStarted",1,SWIGTYPE_p_Ogre__FrameListener);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameListener_frameStarted",2,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (bool)(arg1)->frameStarted((Ogre::FrameEvent const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameListener_frameEnded(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameListener *arg1 = (Ogre::FrameListener *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("frameEnded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("frameEnded",1,"Ogre::FrameListener *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("frameEnded",2,"Ogre::FrameEvent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__FrameListener,0))){
    SWIG_fail_ptr("FrameListener_frameEnded",1,SWIGTYPE_p_Ogre__FrameListener);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__FrameEvent,0))){
    SWIG_fail_ptr("FrameListener_frameEnded",2,SWIGTYPE_p_Ogre__FrameEvent);
  }
  
  result = (bool)(arg1)->frameEnded((Ogre::FrameEvent const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FrameListener(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::FrameListener *result = 0 ;
  
  SWIG_check_num_args("Ogre::FrameListener::FrameListener",0,0)
  result = (Ogre::FrameListener *)new Ogre::FrameListener();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__FrameListener,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FrameListener(void *obj) {
Ogre::FrameListener *arg1 = (Ogre::FrameListener *) obj;
delete arg1;
}
static swig_lua_method swig_Ogre_FrameListener_methods[] = {
    {"frameStarted", _wrap_FrameListener_frameStarted}, 
    {"frameEnded", _wrap_FrameListener_frameEnded}, 
    {0,0}
};
static swig_lua_attribute swig_Ogre_FrameListener_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Ogre_FrameListener_bases[] = {0};
static const char *swig_Ogre_FrameListener_base_names[] = {0};
static swig_lua_class _wrap_class_Ogre_FrameListener = { "FrameListener", &SWIGTYPE_p_Ogre__FrameListener,_wrap_new_FrameListener, swig_delete_FrameListener, swig_Ogre_FrameListener_methods, swig_Ogre_FrameListener_attributes, swig_Ogre_FrameListener_bases, swig_Ogre_FrameListener_base_names };

static int _wrap_VERVE_E_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::VERVE_E",0,0)
  result = (verve::real)(verve::real)verve::VERVE_E;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stepSize_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::stepSize",0,0)
  result = (verve::real)(verve::real)verve::defaults::stepSize;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_eTraceTimeConstant_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::eTraceTimeConstant",0,0)
  result = (verve::real)(verve::real)verve::defaults::eTraceTimeConstant;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TDDiscountTimeConstant_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::TDDiscountTimeConstant",0,0)
  result = (verve::real)(verve::real)verve::defaults::TDDiscountTimeConstant;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_valueFunctionLearningTimeConstant_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::valueFunctionLearningTimeConstant",0,0)
  result = (verve::real)(verve::real)verve::defaults::valueFunctionLearningTimeConstant;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_policyLearningMultiplier_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::policyLearningMultiplier",0,0)
  result = (verve::real)(verve::real)verve::defaults::policyLearningMultiplier;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_modelLearningTimeConstant_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::modelLearningTimeConstant",0,0)
  result = (verve::real)(verve::real)verve::defaults::modelLearningTimeConstant;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_activeETraceThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::activeETraceThreshold",0,0)
  result = (verve::real)(verve::real)verve::defaults::activeETraceThreshold;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minActionSelectionProb_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::minActionSelectionProb",0,0)
  result = (verve::real)(verve::real)verve::defaults::minActionSelectionProb;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_agentArchitecture_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentArchitecture result;
  
  SWIG_check_num_args("verve::defaults::agentArchitecture",0,0)
  result = (verve::AgentArchitecture)(verve::AgentArchitecture)verve::defaults::agentArchitecture;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxNumPlanningSteps_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("verve::defaults::maxNumPlanningSteps",0,0)
  result = (unsigned int)(unsigned int)verve::defaults::maxNumPlanningSteps;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_planningUncertaintyThreshold_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::real result;
  
  SWIG_check_num_args("verve::defaults::planningUncertaintyThreshold",0,0)
  result = (verve::real)(verve::real)verve::defaults::planningUncertaintyThreshold;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Observation(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *result = 0 ;
  
  SWIG_check_num_args("verve::Observation",0,0)
  result = (verve::Observation *)new verve::Observation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__Observation,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  verve::Agent *arg2 = 0 ;
  
  SWIG_check_num_args("init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"verve::Observation *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"verve::Agent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_init",1,SWIGTYPE_p_verve__Observation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Observation_init",2,SWIGTYPE_p_verve__Agent);
  }
  
  (arg1)->init((verve::Agent const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  verve::Observation *arg2 = 0 ;
  
  SWIG_check_num_args("init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"verve::Observation *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"verve::Observation const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_init",1,SWIGTYPE_p_verve__Observation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_init",2,SWIGTYPE_p_verve__Observation);
  }
  
  (arg1)->init((verve::Observation const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Observation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_verve__Agent, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Observation_init__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Observation, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_verve__Observation, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Observation_init__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Observation_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    init(verve::Observation *,verve::Agent const &)\n"
    "    init(verve::Observation *,verve::Observation const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Observation_zeroInputData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  
  SWIG_check_num_args("zeroInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("zeroInputData",1,"verve::Observation *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_zeroInputData",1,SWIGTYPE_p_verve__Observation);
  }
  
  (arg1)->zeroInputData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_copyInputData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  verve::Observation *arg2 = 0 ;
  
  SWIG_check_num_args("copyInputData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copyInputData",1,"verve::Observation *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copyInputData",2,"verve::Observation const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_copyInputData",1,SWIGTYPE_p_verve__Observation);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_copyInputData",2,SWIGTYPE_p_verve__Observation);
  }
  
  (arg1)->copyInputData((verve::Observation const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getNumDiscreteInputs(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumDiscreteInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumDiscreteInputs",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getNumDiscreteInputs",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (unsigned int)((verve::Observation const *)arg1)->getNumDiscreteInputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getNumContinuousInputs(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumContinuousInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumContinuousInputs",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getNumContinuousInputs",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (unsigned int)((verve::Observation const *)arg1)->getNumContinuousInputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_setDiscreteValue(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("setDiscreteValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDiscreteValue",1,"verve::Observation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDiscreteValue",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDiscreteValue",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_setDiscreteValue",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setDiscreteValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getDiscreteValue(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("getDiscreteValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiscreteValue",1,"verve::Observation const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDiscreteValue",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getDiscreteValue",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((verve::Observation const *)arg1)->getDiscreteValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getDiscreteInputData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("getDiscreteInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiscreteInputData",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getDiscreteInputData",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (unsigned int *)((verve::Observation const *)arg1)->getDiscreteInputData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getDiscreteNumOptionsData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("getDiscreteNumOptionsData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiscreteNumOptionsData",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getDiscreteNumOptionsData",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (unsigned int *)((verve::Observation const *)arg1)->getDiscreteNumOptionsData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_setContinuousValue(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  verve::real arg3 ;
  
  SWIG_check_num_args("setContinuousValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setContinuousValue",1,"verve::Observation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setContinuousValue",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setContinuousValue",3,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_setContinuousValue",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (verve::real)lua_tonumber(L, 3);
  (arg1)->setContinuousValue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getContinuousValue(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  verve::real result;
  
  SWIG_check_num_args("getContinuousValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousValue",1,"verve::Observation const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getContinuousValue",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getContinuousValue",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (verve::real)((verve::Observation const *)arg1)->getContinuousValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getContinuousInputData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  verve::real *result = 0 ;
  
  SWIG_check_num_args("getContinuousInputData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousInputData",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getContinuousInputData",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (verve::real *)((verve::Observation const *)arg1)->getContinuousInputData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getContinuousCircularData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("getContinuousCircularData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousCircularData",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getContinuousCircularData",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (bool *)((verve::Observation const *)arg1)->getContinuousCircularData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getDiscreteInputNumOptions(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("getDiscreteInputNumOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiscreteInputNumOptions",1,"verve::Observation const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDiscreteInputNumOptions",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getDiscreteInputNumOptions",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((verve::Observation const *)arg1)->getDiscreteInputNumOptions(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getContinuousInputIsCircular(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("getContinuousInputIsCircular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousInputIsCircular",1,"verve::Observation const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getContinuousInputIsCircular",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getContinuousInputIsCircular",1,SWIGTYPE_p_verve__Observation);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)((verve::Observation const *)arg1)->getContinuousInputIsCircular(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Observation_getContinuousResolution(lua_State* L) {
  int SWIG_arg = 0;
  verve::Observation *arg1 = (verve::Observation *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getContinuousResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousResolution",1,"verve::Observation const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Observation_getContinuousResolution",1,SWIGTYPE_p_verve__Observation);
  }
  
  result = (unsigned int)((verve::Observation const *)arg1)->getContinuousResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Observation(void *obj) {
verve::Observation *arg1 = (verve::Observation *) obj;
delete arg1;
}
static swig_lua_method swig_verve_Observation_methods[] = {
    {"init", _wrap_Observation_init}, 
    {"zeroInputData", _wrap_Observation_zeroInputData}, 
    {"copyInputData", _wrap_Observation_copyInputData}, 
    {"getNumDiscreteInputs", _wrap_Observation_getNumDiscreteInputs}, 
    {"getNumContinuousInputs", _wrap_Observation_getNumContinuousInputs}, 
    {"setDiscreteValue", _wrap_Observation_setDiscreteValue}, 
    {"getDiscreteValue", _wrap_Observation_getDiscreteValue}, 
    {"getDiscreteInputData", _wrap_Observation_getDiscreteInputData}, 
    {"getDiscreteNumOptionsData", _wrap_Observation_getDiscreteNumOptionsData}, 
    {"setContinuousValue", _wrap_Observation_setContinuousValue}, 
    {"getContinuousValue", _wrap_Observation_getContinuousValue}, 
    {"getContinuousInputData", _wrap_Observation_getContinuousInputData}, 
    {"getContinuousCircularData", _wrap_Observation_getContinuousCircularData}, 
    {"getDiscreteInputNumOptions", _wrap_Observation_getDiscreteInputNumOptions}, 
    {"getContinuousInputIsCircular", _wrap_Observation_getContinuousInputIsCircular}, 
    {"getContinuousResolution", _wrap_Observation_getContinuousResolution}, 
    {0,0}
};
static swig_lua_attribute swig_verve_Observation_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_verve_Observation_bases[] = {0};
static const char *swig_verve_Observation_base_names[] = {0};
static swig_lua_class _wrap_class_verve_Observation = { "Observation", &SWIGTYPE_p_verve__Observation,_wrap_new_Observation, swig_delete_Observation, swig_verve_Observation_methods, swig_verve_Observation_attributes, swig_verve_Observation_bases, swig_verve_Observation_base_names };

static int _wrap_new_ContinuousSensorDescriptor(lua_State* L) {
  int SWIG_arg = 0;
  verve::ContinuousSensorDescriptor *result = 0 ;
  
  SWIG_check_num_args("verve::ContinuousSensorDescriptor",0,0)
  result = (verve::ContinuousSensorDescriptor *)new verve::ContinuousSensorDescriptor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__ContinuousSensorDescriptor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContinuousSensorDescriptor_isCircular_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::ContinuousSensorDescriptor *arg1 = (verve::ContinuousSensorDescriptor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("isCircular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isCircular",1,"verve::ContinuousSensorDescriptor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("isCircular",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__ContinuousSensorDescriptor,0))){
    SWIG_fail_ptr("ContinuousSensorDescriptor_isCircular_set",1,SWIGTYPE_p_verve__ContinuousSensorDescriptor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isCircular = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContinuousSensorDescriptor_isCircular_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::ContinuousSensorDescriptor *arg1 = (verve::ContinuousSensorDescriptor *) 0 ;
  bool result;
  
  SWIG_check_num_args("isCircular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isCircular",1,"verve::ContinuousSensorDescriptor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__ContinuousSensorDescriptor,0))){
    SWIG_fail_ptr("ContinuousSensorDescriptor_isCircular_get",1,SWIGTYPE_p_verve__ContinuousSensorDescriptor);
  }
  
  result = (bool) ((arg1)->isCircular);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ContinuousSensorDescriptor(void *obj) {
verve::ContinuousSensorDescriptor *arg1 = (verve::ContinuousSensorDescriptor *) obj;
delete arg1;
}
static swig_lua_method swig_verve_ContinuousSensorDescriptor_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_verve_ContinuousSensorDescriptor_attributes[] = {
    { "isCircular", _wrap_ContinuousSensorDescriptor_isCircular_get, _wrap_ContinuousSensorDescriptor_isCircular_set},
    {0,0,0}
};
static swig_lua_class *swig_verve_ContinuousSensorDescriptor_bases[] = {0};
static const char *swig_verve_ContinuousSensorDescriptor_base_names[] = {0};
static swig_lua_class _wrap_class_verve_ContinuousSensorDescriptor = { "ContinuousSensorDescriptor", &SWIGTYPE_p_verve__ContinuousSensorDescriptor,_wrap_new_ContinuousSensorDescriptor, swig_delete_ContinuousSensorDescriptor, swig_verve_ContinuousSensorDescriptor_methods, swig_verve_ContinuousSensorDescriptor_attributes, swig_verve_ContinuousSensorDescriptor_bases, swig_verve_ContinuousSensorDescriptor_base_names };

static int _wrap_new_DiscreteSensorDescriptor(lua_State* L) {
  int SWIG_arg = 0;
  verve::DiscreteSensorDescriptor *result = 0 ;
  
  SWIG_check_num_args("verve::DiscreteSensorDescriptor",0,0)
  result = (verve::DiscreteSensorDescriptor *)new verve::DiscreteSensorDescriptor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__DiscreteSensorDescriptor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiscreteSensorDescriptor_numOptions_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::DiscreteSensorDescriptor *arg1 = (verve::DiscreteSensorDescriptor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("numOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numOptions",1,"verve::DiscreteSensorDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numOptions",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__DiscreteSensorDescriptor,0))){
    SWIG_fail_ptr("DiscreteSensorDescriptor_numOptions_set",1,SWIGTYPE_p_verve__DiscreteSensorDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->numOptions = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiscreteSensorDescriptor_numOptions_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::DiscreteSensorDescriptor *arg1 = (verve::DiscreteSensorDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("numOptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numOptions",1,"verve::DiscreteSensorDescriptor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__DiscreteSensorDescriptor,0))){
    SWIG_fail_ptr("DiscreteSensorDescriptor_numOptions_get",1,SWIGTYPE_p_verve__DiscreteSensorDescriptor);
  }
  
  result = (unsigned int) ((arg1)->numOptions);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DiscreteSensorDescriptor(void *obj) {
verve::DiscreteSensorDescriptor *arg1 = (verve::DiscreteSensorDescriptor *) obj;
delete arg1;
}
static swig_lua_method swig_verve_DiscreteSensorDescriptor_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_verve_DiscreteSensorDescriptor_attributes[] = {
    { "numOptions", _wrap_DiscreteSensorDescriptor_numOptions_get, _wrap_DiscreteSensorDescriptor_numOptions_set},
    {0,0,0}
};
static swig_lua_class *swig_verve_DiscreteSensorDescriptor_bases[] = {0};
static const char *swig_verve_DiscreteSensorDescriptor_base_names[] = {0};
static swig_lua_class _wrap_class_verve_DiscreteSensorDescriptor = { "DiscreteSensorDescriptor", &SWIGTYPE_p_verve__DiscreteSensorDescriptor,_wrap_new_DiscreteSensorDescriptor, swig_delete_DiscreteSensorDescriptor, swig_verve_DiscreteSensorDescriptor_methods, swig_verve_DiscreteSensorDescriptor_attributes, swig_verve_DiscreteSensorDescriptor_bases, swig_verve_DiscreteSensorDescriptor_base_names };

static int _wrap_new_AgentDescriptor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *result = 0 ;
  
  SWIG_check_num_args("verve::AgentDescriptor",0,0)
  result = (verve::AgentDescriptor *)new verve::AgentDescriptor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__AgentDescriptor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AgentDescriptor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = 0 ;
  verve::AgentDescriptor *result = 0 ;
  
  SWIG_check_num_args("verve::AgentDescriptor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("verve::AgentDescriptor",1,"verve::AgentDescriptor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("new_AgentDescriptor",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (verve::AgentDescriptor *)new verve::AgentDescriptor((verve::AgentDescriptor const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__AgentDescriptor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AgentDescriptor(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AgentDescriptor__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__AgentDescriptor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AgentDescriptor__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AgentDescriptor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    verve::AgentDescriptor()\n"
    "    verve::AgentDescriptor(verve::AgentDescriptor const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AgentDescriptor_addDiscreteSensor(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("addDiscreteSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addDiscreteSensor",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("addDiscreteSensor",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_addDiscreteSensor",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->addDiscreteSensor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getNumDiscreteSensors(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumDiscreteSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumDiscreteSensors",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getNumDiscreteSensors",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getNumDiscreteSensors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getDiscreteSensorNumOptions(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("getDiscreteSensorNumOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiscreteSensorNumOptions",1,"verve::AgentDescriptor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDiscreteSensorNumOptions",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getDiscreteSensorNumOptions",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getDiscreteSensorNumOptions(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_addContinuousSensor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("addContinuousSensor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addContinuousSensor",1,"verve::AgentDescriptor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("addContinuousSensor",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_addContinuousSensor",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->addContinuousSensor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_addContinuousSensor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  
  SWIG_check_num_args("addContinuousSensor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addContinuousSensor",1,"verve::AgentDescriptor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_addContinuousSensor",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  (arg1)->addContinuousSensor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_addContinuousSensor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__AgentDescriptor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AgentDescriptor_addContinuousSensor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__AgentDescriptor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AgentDescriptor_addContinuousSensor__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AgentDescriptor_addContinuousSensor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addContinuousSensor(verve::AgentDescriptor *,bool)\n"
    "    addContinuousSensor(verve::AgentDescriptor *)\n");
  lua_error(L);return 0;
}


static int _wrap_AgentDescriptor_getNumContinuousSensors(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumContinuousSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumContinuousSensors",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getNumContinuousSensors",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getNumContinuousSensors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getContinuousSensorIsCircular(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("getContinuousSensorIsCircular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousSensorIsCircular",1,"verve::AgentDescriptor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getContinuousSensorIsCircular",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getContinuousSensorIsCircular",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)((verve::AgentDescriptor const *)arg1)->getContinuousSensorIsCircular(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setNumOutputs(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("setNumOutputs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setNumOutputs",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setNumOutputs",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setNumOutputs",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setNumOutputs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getNumOutputs(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumOutputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumOutputs",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getNumOutputs",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getNumOutputs();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setContinuousSensorResolution(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("setContinuousSensorResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setContinuousSensorResolution",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setContinuousSensorResolution",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setContinuousSensorResolution",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setContinuousSensorResolution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getContinuousSensorResolution(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getContinuousSensorResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousSensorResolution",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getContinuousSensorResolution",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getContinuousSensorResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setDynamicRBFEnabled(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setDynamicRBFEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDynamicRBFEnabled",1,"verve::AgentDescriptor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setDynamicRBFEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setDynamicRBFEnabled",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDynamicRBFEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_isDynamicRBFEnabled(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  bool result;
  
  SWIG_check_num_args("isDynamicRBFEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDynamicRBFEnabled",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_isDynamicRBFEnabled",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (bool)((verve::AgentDescriptor const *)arg1)->isDynamicRBFEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setArchitecture(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  verve::AgentArchitecture arg2 ;
  
  SWIG_check_num_args("setArchitecture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setArchitecture",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setArchitecture",2,"verve::AgentArchitecture");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setArchitecture",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (verve::AgentArchitecture)(int)lua_tonumber(L, 2);
  (arg1)->setArchitecture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getArchitecture(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  verve::AgentArchitecture result;
  
  SWIG_check_num_args("getArchitecture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getArchitecture",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getArchitecture",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (verve::AgentArchitecture)((verve::AgentDescriptor const *)arg1)->getArchitecture();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setMaxNumPlanningSteps(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("setMaxNumPlanningSteps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMaxNumPlanningSteps",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setMaxNumPlanningSteps",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setMaxNumPlanningSteps",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setMaxNumPlanningSteps(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getMaxNumPlanningSteps(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getMaxNumPlanningSteps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMaxNumPlanningSteps",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getMaxNumPlanningSteps",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (unsigned int)((verve::AgentDescriptor const *)arg1)->getMaxNumPlanningSteps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_setPlanningUncertaintyThreshold(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("setPlanningUncertaintyThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPlanningUncertaintyThreshold",1,"verve::AgentDescriptor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setPlanningUncertaintyThreshold",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_setPlanningUncertaintyThreshold",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  (arg1)->setPlanningUncertaintyThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDescriptor_getPlanningUncertaintyThreshold(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("getPlanningUncertaintyThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPlanningUncertaintyThreshold",1,"verve::AgentDescriptor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("AgentDescriptor_getPlanningUncertaintyThreshold",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (verve::real)((verve::AgentDescriptor const *)arg1)->getPlanningUncertaintyThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AgentDescriptor(void *obj) {
verve::AgentDescriptor *arg1 = (verve::AgentDescriptor *) obj;
delete arg1;
}
static swig_lua_method swig_verve_AgentDescriptor_methods[] = {
    {"addDiscreteSensor", _wrap_AgentDescriptor_addDiscreteSensor}, 
    {"getNumDiscreteSensors", _wrap_AgentDescriptor_getNumDiscreteSensors}, 
    {"getDiscreteSensorNumOptions", _wrap_AgentDescriptor_getDiscreteSensorNumOptions}, 
    {"addContinuousSensor", _wrap_AgentDescriptor_addContinuousSensor}, 
    {"getNumContinuousSensors", _wrap_AgentDescriptor_getNumContinuousSensors}, 
    {"getContinuousSensorIsCircular", _wrap_AgentDescriptor_getContinuousSensorIsCircular}, 
    {"setNumOutputs", _wrap_AgentDescriptor_setNumOutputs}, 
    {"getNumOutputs", _wrap_AgentDescriptor_getNumOutputs}, 
    {"setContinuousSensorResolution", _wrap_AgentDescriptor_setContinuousSensorResolution}, 
    {"getContinuousSensorResolution", _wrap_AgentDescriptor_getContinuousSensorResolution}, 
    {"setDynamicRBFEnabled", _wrap_AgentDescriptor_setDynamicRBFEnabled}, 
    {"isDynamicRBFEnabled", _wrap_AgentDescriptor_isDynamicRBFEnabled}, 
    {"setArchitecture", _wrap_AgentDescriptor_setArchitecture}, 
    {"getArchitecture", _wrap_AgentDescriptor_getArchitecture}, 
    {"setMaxNumPlanningSteps", _wrap_AgentDescriptor_setMaxNumPlanningSteps}, 
    {"getMaxNumPlanningSteps", _wrap_AgentDescriptor_getMaxNumPlanningSteps}, 
    {"setPlanningUncertaintyThreshold", _wrap_AgentDescriptor_setPlanningUncertaintyThreshold}, 
    {"getPlanningUncertaintyThreshold", _wrap_AgentDescriptor_getPlanningUncertaintyThreshold}, 
    {0,0}
};
static swig_lua_attribute swig_verve_AgentDescriptor_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_verve_AgentDescriptor_bases[] = {0};
static const char *swig_verve_AgentDescriptor_base_names[] = {0};
static swig_lua_class _wrap_class_verve_AgentDescriptor = { "AgentDescriptor", &SWIGTYPE_p_verve__AgentDescriptor,_wrap_new_AgentDescriptor, swig_delete_AgentDescriptor, swig_verve_AgentDescriptor_methods, swig_verve_AgentDescriptor_attributes, swig_verve_AgentDescriptor_bases, swig_verve_AgentDescriptor_base_names };

static int _wrap_new_AgentDebugData(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *result = 0 ;
  
  SWIG_check_num_args("verve::AgentDebugData",0,0)
  result = (verve::AgentDebugData *)new verve::AgentDebugData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__AgentDebugData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_reset(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_reset",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_reward_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("reward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reward",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("reward",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_reward_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->reward = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_reward_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("reward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reward",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_reward_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->reward);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_valueEstimation_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("valueEstimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("valueEstimation",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("valueEstimation",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_valueEstimation_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->valueEstimation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_valueEstimation_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("valueEstimation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("valueEstimation",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_valueEstimation_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->valueEstimation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_TDError_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("TDError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TDError",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TDError",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_TDError_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->TDError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_TDError_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("TDError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TDError",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_TDError_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->TDError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_curiosityReward_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("curiosityReward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("curiosityReward",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("curiosityReward",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_curiosityReward_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->curiosityReward = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_curiosityReward_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("curiosityReward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("curiosityReward",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_curiosityReward_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->curiosityReward);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_predictionUncertaintyEstimation_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("predictionUncertaintyEstimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("predictionUncertaintyEstimation",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("predictionUncertaintyEstimation",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_predictionUncertaintyEstimation_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->predictionUncertaintyEstimation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_predictionUncertaintyEstimation_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("predictionUncertaintyEstimation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("predictionUncertaintyEstimation",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_predictionUncertaintyEstimation_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->predictionUncertaintyEstimation);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_modelPredictionError_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("modelPredictionError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("modelPredictionError",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("modelPredictionError",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_modelPredictionError_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  if (arg1) (arg1)->modelPredictionError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_modelPredictionError_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  verve::real result;
  
  SWIG_check_num_args("modelPredictionError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("modelPredictionError",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_modelPredictionError_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (verve::real) ((arg1)->modelPredictionError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_planLength_set(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("planLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("planLength",1,"verve::AgentDebugData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("planLength",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_planLength_set",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->planLength = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentDebugData_planLength_get(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDebugData *arg1 = (verve::AgentDebugData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("planLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("planLength",1,"verve::AgentDebugData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDebugData,0))){
    SWIG_fail_ptr("AgentDebugData_planLength_get",1,SWIGTYPE_p_verve__AgentDebugData);
  }
  
  result = (unsigned int) ((arg1)->planLength);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AgentDebugData(void *obj) {
verve::AgentDebugData *arg1 = (verve::AgentDebugData *) obj;
delete arg1;
}
static swig_lua_method swig_verve_AgentDebugData_methods[] = {
    {"reset", _wrap_AgentDebugData_reset}, 
    {0,0}
};
static swig_lua_attribute swig_verve_AgentDebugData_attributes[] = {
    { "reward", _wrap_AgentDebugData_reward_get, _wrap_AgentDebugData_reward_set},
    { "valueEstimation", _wrap_AgentDebugData_valueEstimation_get, _wrap_AgentDebugData_valueEstimation_set},
    { "TDError", _wrap_AgentDebugData_TDError_get, _wrap_AgentDebugData_TDError_set},
    { "curiosityReward", _wrap_AgentDebugData_curiosityReward_get, _wrap_AgentDebugData_curiosityReward_set},
    { "predictionUncertaintyEstimation", _wrap_AgentDebugData_predictionUncertaintyEstimation_get, _wrap_AgentDebugData_predictionUncertaintyEstimation_set},
    { "modelPredictionError", _wrap_AgentDebugData_modelPredictionError_get, _wrap_AgentDebugData_modelPredictionError_set},
    { "planLength", _wrap_AgentDebugData_planLength_get, _wrap_AgentDebugData_planLength_set},
    {0,0,0}
};
static swig_lua_class *swig_verve_AgentDebugData_bases[] = {0};
static const char *swig_verve_AgentDebugData_base_names[] = {0};
static swig_lua_class _wrap_class_verve_AgentDebugData = { "AgentDebugData", &SWIGTYPE_p_verve__AgentDebugData,_wrap_new_AgentDebugData, swig_delete_AgentDebugData, swig_verve_AgentDebugData_methods, swig_verve_AgentDebugData_attributes, swig_verve_AgentDebugData_bases, swig_verve_AgentDebugData_base_names };

static int _wrap_new_Agent(lua_State* L) {
  int SWIG_arg = 0;
  verve::AgentDescriptor *arg1 = 0 ;
  verve::Agent *result = 0 ;
  
  SWIG_check_num_args("verve::Agent",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("verve::Agent",1,"verve::AgentDescriptor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__AgentDescriptor,0))){
    SWIG_fail_ptr("new_Agent",1,SWIGTYPE_p_verve__AgentDescriptor);
  }
  
  result = (verve::Agent *)new verve::Agent((verve::AgentDescriptor const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__Agent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_destroy(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  
  SWIG_check_num_args("destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("destroy",1,"verve::Agent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_destroy",1,SWIGTYPE_p_verve__Agent);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_resetShortTermMemory(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  
  SWIG_check_num_args("resetShortTermMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetShortTermMemory",1,"verve::Agent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_resetShortTermMemory",1,SWIGTYPE_p_verve__Agent);
  }
  
  (arg1)->resetShortTermMemory();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_update(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::real arg2 ;
  verve::Observation *arg3 = 0 ;
  verve::real arg4 ;
  unsigned int result;
  
  SWIG_check_num_args("update",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"verve::real");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("update",3,"verve::Observation const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("update",4,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_update",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Agent_update",3,SWIGTYPE_p_verve__Observation);
  }
  
  arg4 = (verve::real)lua_tonumber(L, 4);
  result = (unsigned int)(arg1)->update(arg2,(verve::Observation const &)*arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_getNumDiscreteSensors(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumDiscreteSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumDiscreteSensors",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getNumDiscreteSensors",1,SWIGTYPE_p_verve__Agent);
  }
  
  result = (unsigned int)((verve::Agent const *)arg1)->getNumDiscreteSensors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_getNumContinuousSensors(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("getNumContinuousSensors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumContinuousSensors",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getNumContinuousSensors",1,SWIGTYPE_p_verve__Agent);
  }
  
  result = (unsigned int)((verve::Agent const *)arg1)->getNumContinuousSensors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_setETraceTimeConstant(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("setETraceTimeConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setETraceTimeConstant",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setETraceTimeConstant",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_setETraceTimeConstant",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  (arg1)->setETraceTimeConstant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_setTDDiscountTimeConstant(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("setTDDiscountTimeConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTDDiscountTimeConstant",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTDDiscountTimeConstant",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_setTDDiscountTimeConstant",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  (arg1)->setTDDiscountTimeConstant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_setTDLearningRate(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::real arg2 ;
  verve::real arg3 ;
  
  SWIG_check_num_args("setTDLearningRate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTDLearningRate",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTDLearningRate",2,"verve::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setTDLearningRate",3,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_setTDLearningRate",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  arg3 = (verve::real)lua_tonumber(L, 3);
  (arg1)->setTDLearningRate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_setModelLearningRate(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::real arg2 ;
  
  SWIG_check_num_args("setModelLearningRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setModelLearningRate",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setModelLearningRate",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_setModelLearningRate",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  (arg1)->setModelLearningRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_setLearningEnabled(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setLearningEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLearningEnabled",1,"verve::Agent *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setLearningEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_setLearningEnabled",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLearningEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_getAge(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("getAge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAge",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getAge",1,SWIGTYPE_p_verve__Agent);
  }
  
  result = (unsigned long)((verve::Agent const *)arg1)->getAge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_getAgeString(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getAgeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAgeString",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getAgeString",1,SWIGTYPE_p_verve__Agent);
  }
  
  result = ((verve::Agent const *)arg1)->getAgeString();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_computeValueEstimation(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::Observation *arg2 = 0 ;
  verve::real result;
  
  SWIG_check_num_args("computeValueEstimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("computeValueEstimation",1,"verve::Agent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("computeValueEstimation",2,"verve::Observation const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_computeValueEstimation",1,SWIGTYPE_p_verve__Agent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_verve__Observation,0))){
    SWIG_fail_ptr("Agent_computeValueEstimation",2,SWIGTYPE_p_verve__Observation);
  }
  
  result = (verve::real)(arg1)->computeValueEstimation((verve::Observation const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_getDescriptor(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::AgentDescriptor *result = 0 ;
  
  SWIG_check_num_args("getDescriptor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDescriptor",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getDescriptor",1,SWIGTYPE_p_verve__Agent);
  }
  
  result = (verve::AgentDescriptor *)((verve::Agent const *)arg1)->getDescriptor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__AgentDescriptor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_saveValueData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("saveValueData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveValueData",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("saveValueData",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("saveValueData",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_saveValueData",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Agent_saveValueData",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->saveValueData(arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_saveValueData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("saveValueData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveValueData",1,"verve::Agent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("saveValueData",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_saveValueData",1,SWIGTYPE_p_verve__Agent);
  }
  
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->saveValueData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_saveValueData(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Agent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Agent_saveValueData__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Agent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Agent_saveValueData__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Agent_saveValueData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    saveValueData(verve::Agent *,unsigned int,std::string const &)\n"
    "    saveValueData(verve::Agent *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Agent_saveStateRBFData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("saveStateRBFData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveStateRBFData",1,"verve::Agent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("saveStateRBFData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_saveStateRBFData",1,SWIGTYPE_p_verve__Agent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Agent_saveStateRBFData",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->saveStateRBFData((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_saveStateRBFData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  
  SWIG_check_num_args("saveStateRBFData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("saveStateRBFData",1,"verve::Agent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_saveStateRBFData",1,SWIGTYPE_p_verve__Agent);
  }
  
  (arg1)->saveStateRBFData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Agent_saveStateRBFData(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Agent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Agent_saveStateRBFData__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_verve__Agent, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Agent_saveStateRBFData__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Agent_saveStateRBFData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    saveStateRBFData(verve::Agent *,std::string const &)\n"
    "    saveStateRBFData(verve::Agent *)\n");
  lua_error(L);return 0;
}


static int _wrap_Agent_getDebugData(lua_State* L) {
  int SWIG_arg = 0;
  verve::Agent *arg1 = (verve::Agent *) 0 ;
  verve::AgentDebugData *result = 0 ;
  
  SWIG_check_num_args("getDebugData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDebugData",1,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("Agent_getDebugData",1,SWIGTYPE_p_verve__Agent);
  }
  
  {
    verve::AgentDebugData const &_result_ref = ((verve::Agent const *)arg1)->getDebugData();
    result = (verve::AgentDebugData *) &_result_ref;
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__AgentDebugData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Agent(void *obj) {
verve::Agent *arg1 = (verve::Agent *) obj;
delete arg1;
}
static swig_lua_method swig_verve_Agent_methods[] = {
    {"destroy", _wrap_Agent_destroy}, 
    {"resetShortTermMemory", _wrap_Agent_resetShortTermMemory}, 
    {"update", _wrap_Agent_update}, 
    {"getNumDiscreteSensors", _wrap_Agent_getNumDiscreteSensors}, 
    {"getNumContinuousSensors", _wrap_Agent_getNumContinuousSensors}, 
    {"setETraceTimeConstant", _wrap_Agent_setETraceTimeConstant}, 
    {"setTDDiscountTimeConstant", _wrap_Agent_setTDDiscountTimeConstant}, 
    {"setTDLearningRate", _wrap_Agent_setTDLearningRate}, 
    {"setModelLearningRate", _wrap_Agent_setModelLearningRate}, 
    {"setLearningEnabled", _wrap_Agent_setLearningEnabled}, 
    {"getAge", _wrap_Agent_getAge}, 
    {"getAgeString", _wrap_Agent_getAgeString}, 
    {"computeValueEstimation", _wrap_Agent_computeValueEstimation}, 
    {"getDescriptor", _wrap_Agent_getDescriptor}, 
    {"saveValueData", _wrap_Agent_saveValueData}, 
    {"saveStateRBFData", _wrap_Agent_saveStateRBFData}, 
    {"getDebugData", _wrap_Agent_getDebugData}, 
    {0,0}
};
static swig_lua_attribute swig_verve_Agent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_verve_Agent_bases[] = {0};
static const char *swig_verve_Agent_base_names[] = {0};
static swig_lua_class _wrap_class_verve_Agent = { "Agent", &SWIGTYPE_p_verve__Agent,_wrap_new_Agent, swig_delete_Agent, swig_verve_Agent_methods, swig_verve_Agent_attributes, swig_verve_Agent_bases, swig_verve_Agent_base_names };

static int _wrap_new_SimulationEngine(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *result = 0 ;
  
  SWIG_check_num_args("SimulationEngine",0,0)
  result = (SimulationEngine *)new SimulationEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SimulationEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  PhysicalCamera::Type arg2 ;
  opal::real arg3 ;
  PhysicalCamera::Type *argp2 ;
  bool result;
  
  SWIG_check_num_args("init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"SimulationEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"PhysicalCamera::Type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("init",3,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_init",1,SWIGTYPE_p_SimulationEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_PhysicalCamera__Type,0))){
    SWIG_fail_ptr("SimulationEngine_init",2,SWIGTYPE_p_PhysicalCamera__Type);
  }
  arg2 = *argp2;
  
  arg3 = (opal::real)lua_tonumber(L, 3);
  result = (bool)(arg1)->init(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  PhysicalCamera::Type arg2 ;
  PhysicalCamera::Type *argp2 ;
  bool result;
  
  SWIG_check_num_args("init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"SimulationEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"PhysicalCamera::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_init",1,SWIGTYPE_p_SimulationEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_PhysicalCamera__Type,0))){
    SWIG_fail_ptr("SimulationEngine_init",2,SWIGTYPE_p_PhysicalCamera__Type);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->init(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"SimulationEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_init",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (bool)(arg1)->init();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_init(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimulationEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SimulationEngine_init__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimulationEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PhysicalCamera__Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SimulationEngine_init__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SimulationEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_PhysicalCamera__Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SimulationEngine_init__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SimulationEngine_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    init(SimulationEngine *,PhysicalCamera::Type,opal::real)\n"
    "    init(SimulationEngine *,PhysicalCamera::Type)\n"
    "    init(SimulationEngine *)\n");
  lua_error(L);return 0;
}


static int _wrap_SimulationEngine_update(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  opal::real *arg2 = 0 ;
  opal::real *arg3 = 0 ;
  opal::real temp2 ;
  opal::real temp3 ;
  
  SWIG_check_num_args("update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"SimulationEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"opal::real &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("update",3,"opal::real &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_update",1,SWIGTYPE_p_SimulationEngine);
  }
  
  temp2 = (opal::real)lua_tonumber(L,2);
  arg2 = &temp2; 
  temp3 = (opal::real)lua_tonumber(L,3);
  arg3 = &temp3; 
  (arg1)->update(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_quitApp(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("quitApp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("quitApp",1,"SimulationEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_quitApp",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (bool)(arg1)->quitApp();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getSimulator(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  opal::Simulator *result = 0 ;
  
  SWIG_check_num_args("getSimulator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSimulator",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getSimulator",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (opal::Simulator *)((SimulationEngine const *)arg1)->getSimulator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Simulator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getSceneManager(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  SWIG_check_num_args("getSceneManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSceneManager",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getSceneManager",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (Ogre::SceneManager *)((SimulationEngine const *)arg1)->getSceneManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getKeyboard(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  OIS::Keyboard *result = 0 ;
  
  SWIG_check_num_args("getKeyboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getKeyboard",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getKeyboard",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (OIS::Keyboard *)((SimulationEngine const *)arg1)->getKeyboard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OIS__Keyboard,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getMouse(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  OIS::Mouse *result = 0 ;
  
  SWIG_check_num_args("getMouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMouse",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getMouse",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (OIS::Mouse *)((SimulationEngine const *)arg1)->getMouse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OIS__Mouse,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  PhysicalCamera *result = 0 ;
  
  SWIG_check_num_args("getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCamera",1,"SimulationEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getCamera",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (PhysicalCamera *)(arg1)->getCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhysicalCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_setCameraMoveSpeed(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("setCameraMoveSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCameraMoveSpeed",1,"SimulationEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCameraMoveSpeed",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_setCameraMoveSpeed",1,SWIGTYPE_p_SimulationEngine);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  (arg1)->setCameraMoveSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_go(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  
  SWIG_check_num_args("go",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("go",1,"SimulationEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_go",1,SWIGTYPE_p_SimulationEngine);
  }
  
  (arg1)->go();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_setUpdateMode(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  SimulationEngine::UpdateMode arg2 ;
  opal::real arg3 ;
  
  SWIG_check_num_args("setUpdateMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setUpdateMode",1,"SimulationEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setUpdateMode",2,"SimulationEngine::UpdateMode");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setUpdateMode",3,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_setUpdateMode",1,SWIGTYPE_p_SimulationEngine);
  }
  
  arg2 = (SimulationEngine::UpdateMode)(int)lua_tonumber(L, 2);
  arg3 = (opal::real)lua_tonumber(L, 3);
  (arg1)->setUpdateMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getUpdateMode(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  SimulationEngine::UpdateMode result;
  
  SWIG_check_num_args("getUpdateMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getUpdateMode",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getUpdateMode",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (SimulationEngine::UpdateMode)((SimulationEngine const *)arg1)->getUpdateMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getUpdateConstant(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  opal::real result;
  
  SWIG_check_num_args("getUpdateConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getUpdateConstant",1,"SimulationEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getUpdateConstant",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (opal::real)((SimulationEngine const *)arg1)->getUpdateConstant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_getPhysicalEntity(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  std::string *arg2 = 0 ;
  PhysicalEntity *result = 0 ;
  
  SWIG_check_num_args("getPhysicalEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPhysicalEntity",1,"SimulationEngine const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getPhysicalEntity",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_getPhysicalEntity",1,SWIGTYPE_p_SimulationEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimulationEngine_getPhysicalEntity",2,SWIGTYPE_p_std__string);
  }
  
  result = (PhysicalEntity *)((SimulationEngine const *)arg1)->getPhysicalEntity((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhysicalEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_destroyPhysicalEntity(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  PhysicalEntity *arg2 = (PhysicalEntity *) 0 ;
  
  SWIG_check_num_args("destroyPhysicalEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("destroyPhysicalEntity",1,"SimulationEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("destroyPhysicalEntity",2,"PhysicalEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_destroyPhysicalEntity",1,SWIGTYPE_p_SimulationEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_PhysicalEntity,0))){
    SWIG_fail_ptr("SimulationEngine_destroyPhysicalEntity",2,SWIGTYPE_p_PhysicalEntity);
  }
  
  (arg1)->destroyPhysicalEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_destroyAllPhysicalEntities(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  
  SWIG_check_num_args("destroyAllPhysicalEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("destroyAllPhysicalEntities",1,"SimulationEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_destroyAllPhysicalEntities",1,SWIGTYPE_p_SimulationEngine);
  }
  
  (arg1)->destroyAllPhysicalEntities();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationEngine_createPhysicalEntity(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = (SimulationEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::Solid *arg4 = (opal::Solid *) 0 ;
  PhysicalEntity *result = 0 ;
  
  SWIG_check_num_args("createPhysicalEntity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createPhysicalEntity",1,"SimulationEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("createPhysicalEntity",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("createPhysicalEntity",3,"std::string const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("createPhysicalEntity",4,"opal::Solid *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("SimulationEngine_createPhysicalEntity",1,SWIGTYPE_p_SimulationEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimulationEngine_createPhysicalEntity",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SimulationEngine_createPhysicalEntity",3,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_opal__Solid,0))){
    SWIG_fail_ptr("SimulationEngine_createPhysicalEntity",4,SWIGTYPE_p_opal__Solid);
  }
  
  result = (PhysicalEntity *)(arg1)->createPhysicalEntity((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PhysicalEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimulationEngine(void *obj) {
SimulationEngine *arg1 = (SimulationEngine *) obj;
delete arg1;
}
static swig_lua_method swig_SimulationEngine_methods[] = {
    {"init", _wrap_SimulationEngine_init}, 
    {"update", _wrap_SimulationEngine_update}, 
    {"quitApp", _wrap_SimulationEngine_quitApp}, 
    {"getSimulator", _wrap_SimulationEngine_getSimulator}, 
    {"getSceneManager", _wrap_SimulationEngine_getSceneManager}, 
    {"getKeyboard", _wrap_SimulationEngine_getKeyboard}, 
    {"getMouse", _wrap_SimulationEngine_getMouse}, 
    {"getCamera", _wrap_SimulationEngine_getCamera}, 
    {"setCameraMoveSpeed", _wrap_SimulationEngine_setCameraMoveSpeed}, 
    {"go", _wrap_SimulationEngine_go}, 
    {"setUpdateMode", _wrap_SimulationEngine_setUpdateMode}, 
    {"getUpdateMode", _wrap_SimulationEngine_getUpdateMode}, 
    {"getUpdateConstant", _wrap_SimulationEngine_getUpdateConstant}, 
    {"getPhysicalEntity", _wrap_SimulationEngine_getPhysicalEntity}, 
    {"destroyPhysicalEntity", _wrap_SimulationEngine_destroyPhysicalEntity}, 
    {"destroyAllPhysicalEntities", _wrap_SimulationEngine_destroyAllPhysicalEntities}, 
    {"createPhysicalEntity", _wrap_SimulationEngine_createPhysicalEntity}, 
    {0,0}
};
static swig_lua_attribute swig_SimulationEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_SimulationEngine_bases[] = {0,0};
static const char *swig_SimulationEngine_base_names[] = {"Ogre::FrameListener *",0};
static swig_lua_class _wrap_class_SimulationEngine = { "SimulationEngine", &SWIGTYPE_p_SimulationEngine,_wrap_new_SimulationEngine, swig_delete_SimulationEngine, swig_SimulationEngine_methods, swig_SimulationEngine_attributes, swig_SimulationEngine_bases, swig_SimulationEngine_base_names };

static int _wrap_new_AgentVisualDebugger(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::SceneManager *arg1 = (Ogre::SceneManager *) 0 ;
  AgentVisualDebugger *result = 0 ;
  
  SWIG_check_num_args("AgentVisualDebugger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("AgentVisualDebugger",1,"Ogre::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__SceneManager,0))){
    SWIG_fail_ptr("new_AgentVisualDebugger",1,SWIGTYPE_p_Ogre__SceneManager);
  }
  
  result = (AgentVisualDebugger *)new AgentVisualDebugger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_AgentVisualDebugger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentVisualDebugger_updateVisuals(lua_State* L) {
  int SWIG_arg = 0;
  AgentVisualDebugger *arg1 = (AgentVisualDebugger *) 0 ;
  
  SWIG_check_num_args("updateVisuals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVisuals",1,"AgentVisualDebugger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AgentVisualDebugger,0))){
    SWIG_fail_ptr("AgentVisualDebugger_updateVisuals",1,SWIGTYPE_p_AgentVisualDebugger);
  }
  
  (arg1)->updateVisuals();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentVisualDebugger_setDisplayEnabled(lua_State* L) {
  int SWIG_arg = 0;
  AgentVisualDebugger *arg1 = (AgentVisualDebugger *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setDisplayEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDisplayEnabled",1,"AgentVisualDebugger *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setDisplayEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AgentVisualDebugger,0))){
    SWIG_fail_ptr("AgentVisualDebugger_setDisplayEnabled",1,SWIGTYPE_p_AgentVisualDebugger);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDisplayEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AgentVisualDebugger_setAgent(lua_State* L) {
  int SWIG_arg = 0;
  AgentVisualDebugger *arg1 = (AgentVisualDebugger *) 0 ;
  verve::Agent *arg2 = (verve::Agent *) 0 ;
  
  SWIG_check_num_args("setAgent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAgent",1,"AgentVisualDebugger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setAgent",2,"verve::Agent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_AgentVisualDebugger,0))){
    SWIG_fail_ptr("AgentVisualDebugger_setAgent",1,SWIGTYPE_p_AgentVisualDebugger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_verve__Agent,0))){
    SWIG_fail_ptr("AgentVisualDebugger_setAgent",2,SWIGTYPE_p_verve__Agent);
  }
  
  (arg1)->setAgent((verve::Agent const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AgentVisualDebugger(void *obj) {
AgentVisualDebugger *arg1 = (AgentVisualDebugger *) obj;
delete arg1;
}
static swig_lua_method swig_AgentVisualDebugger_methods[] = {
    {"updateVisuals", _wrap_AgentVisualDebugger_updateVisuals}, 
    {"setDisplayEnabled", _wrap_AgentVisualDebugger_setDisplayEnabled}, 
    {"setAgent", _wrap_AgentVisualDebugger_setAgent}, 
    {0,0}
};
static swig_lua_attribute swig_AgentVisualDebugger_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_AgentVisualDebugger_bases[] = {0};
static const char *swig_AgentVisualDebugger_base_names[] = {0};
static swig_lua_class _wrap_class_AgentVisualDebugger = { "AgentVisualDebugger", &SWIGTYPE_p_AgentVisualDebugger,_wrap_new_AgentVisualDebugger, swig_delete_AgentVisualDebugger, swig_AgentVisualDebugger_methods, swig_AgentVisualDebugger_attributes, swig_AgentVisualDebugger_bases, swig_AgentVisualDebugger_base_names };

static int _wrap_LearningEntity_resetBodyAndSTM(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  
  SWIG_check_num_args("resetBodyAndSTM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetBodyAndSTM",1,"LearningEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_resetBodyAndSTM",1,SWIGTYPE_p_LearningEntity);
  }
  
  (arg1)->resetBodyAndSTM();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearningEntity_resetBodyAndCreateNewAgent(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  
  SWIG_check_num_args("resetBodyAndCreateNewAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resetBodyAndCreateNewAgent",1,"LearningEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_resetBodyAndCreateNewAgent",1,SWIGTYPE_p_LearningEntity);
  }
  
  (arg1)->resetBodyAndCreateNewAgent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearningEntity_randomizeState(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  
  SWIG_check_num_args("randomizeState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randomizeState",1,"LearningEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_randomizeState",1,SWIGTYPE_p_LearningEntity);
  }
  
  (arg1)->randomizeState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearningEntity_update(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  verve::real arg2 ;
  verve::real arg3 ;
  
  SWIG_check_num_args("update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"LearningEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"verve::real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("update",3,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_update",1,SWIGTYPE_p_LearningEntity);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  arg3 = (verve::real)lua_tonumber(L, 3);
  (arg1)->update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearningEntity_getAgent(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  verve::Agent *result = 0 ;
  
  SWIG_check_num_args("getAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAgent",1,"LearningEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_getAgent",1,SWIGTYPE_p_LearningEntity);
  }
  
  result = (verve::Agent *)((LearningEntity const *)arg1)->getAgent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_verve__Agent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LearningEntity_getContinuousInputs(lua_State* L) {
  int SWIG_arg = 0;
  LearningEntity *arg1 = (LearningEntity *) 0 ;
  verve::real *result = 0 ;
  
  SWIG_check_num_args("getContinuousInputs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContinuousInputs",1,"LearningEntity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LearningEntity,0))){
    SWIG_fail_ptr("LearningEntity_getContinuousInputs",1,SWIGTYPE_p_LearningEntity);
  }
  
  result = (verve::real *)((LearningEntity const *)arg1)->getContinuousInputs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LearningEntity(void *obj) {
LearningEntity *arg1 = (LearningEntity *) obj;
delete arg1;
}
static swig_lua_method swig_LearningEntity_methods[] = {
    {"resetBodyAndSTM", _wrap_LearningEntity_resetBodyAndSTM}, 
    {"resetBodyAndCreateNewAgent", _wrap_LearningEntity_resetBodyAndCreateNewAgent}, 
    {"randomizeState", _wrap_LearningEntity_randomizeState}, 
    {"update", _wrap_LearningEntity_update}, 
    {"getAgent", _wrap_LearningEntity_getAgent}, 
    {"getContinuousInputs", _wrap_LearningEntity_getContinuousInputs}, 
    {0,0}
};
static swig_lua_attribute swig_LearningEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LearningEntity_bases[] = {0};
static const char *swig_LearningEntity_base_names[] = {0};
static swig_lua_class _wrap_class_LearningEntity = { "LearningEntity", &SWIGTYPE_p_LearningEntity,0, swig_delete_LearningEntity, swig_LearningEntity_methods, swig_LearningEntity_attributes, swig_LearningEntity_bases, swig_LearningEntity_base_names };

static int _wrap_new_Car(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = 0 ;
  Car *result = 0 ;
  
  SWIG_check_num_args("Car",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Car",1,"SimulationEngine &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("new_Car",1,SWIGTYPE_p_SimulationEngine);
  }
  
  result = (Car *)new Car(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Car,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  opal::Matrix44r *arg5 = 0 ;
  opal::real arg6 ;
  
  SWIG_check_num_args("init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Car *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("init",5,"opal::Matrix44r const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("init",6,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_init",1,SWIGTYPE_p_Car);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_opal__Matrix44r,0))){
    SWIG_fail_ptr("Car_init",5,SWIGTYPE_p_opal__Matrix44r);
  }
  
  arg6 = (opal::real)lua_tonumber(L, 6);
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4,(opal::Matrix44r const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  opal::Matrix44r *arg5 = 0 ;
  
  SWIG_check_num_args("init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Car *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("init",5,"opal::Matrix44r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_init",1,SWIGTYPE_p_Car);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_opal__Matrix44r,0))){
    SWIG_fail_ptr("Car_init",5,SWIGTYPE_p_opal__Matrix44r);
  }
  
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4,(opal::Matrix44r const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  
  SWIG_check_num_args("init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Car *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_init",1,SWIGTYPE_p_Car);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_init__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Car *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_init",1,SWIGTYPE_p_Car);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Car_init",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_init(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Car, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Car_init__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Car, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Car_init__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Car, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_opal__Matrix44r, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Car_init__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Car, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_opal__Matrix44r, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Car_init__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Car_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    init(Car *,std::string const &,std::string const &,opal::real,opal::Matrix44r const &,opal::real)\n"
    "    init(Car *,std::string const &,std::string const &,opal::real,opal::Matrix44r const &)\n"
    "    init(Car *,std::string const &,std::string const &,opal::real)\n"
    "    init(Car *,std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Car_forward(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  
  SWIG_check_num_args("forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("forward",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_forward",1,SWIGTYPE_p_Car);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  
  SWIG_check_num_args("reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reverse",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_reverse",1,SWIGTYPE_p_Car);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_idle(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  
  SWIG_check_num_args("idle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("idle",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_idle",1,SWIGTYPE_p_Car);
  }
  
  (arg1)->idle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_setThrottle(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("setThrottle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setThrottle",1,"Car *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setThrottle",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_setThrottle",1,SWIGTYPE_p_Car);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  (arg1)->setThrottle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_steerLeft(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  
  SWIG_check_num_args("steerLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("steerLeft",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_steerLeft",1,SWIGTYPE_p_Car);
  }
  
  (arg1)->steerLeft();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_steerRight(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  
  SWIG_check_num_args("steerRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("steerRight",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_steerRight",1,SWIGTYPE_p_Car);
  }
  
  (arg1)->steerRight();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_setSteering(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("setSteering",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSteering",1,"Car *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSteering",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_setSteering",1,SWIGTYPE_p_Car);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  (arg1)->setSteering(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_getChassis(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::Solid *result = 0 ;
  
  SWIG_check_num_args("getChassis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChassis",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_getChassis",1,SWIGTYPE_p_Car);
  }
  
  result = (opal::Solid *)(arg1)->getChassis();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__Solid,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_getFLMotor(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::GearedMotor *result = 0 ;
  
  SWIG_check_num_args("getFLMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFLMotor",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_getFLMotor",1,SWIGTYPE_p_Car);
  }
  
  result = (opal::GearedMotor *)(arg1)->getFLMotor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__GearedMotor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_getFRMotor(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::GearedMotor *result = 0 ;
  
  SWIG_check_num_args("getFRMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFRMotor",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_getFRMotor",1,SWIGTYPE_p_Car);
  }
  
  result = (opal::GearedMotor *)(arg1)->getFRMotor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_opal__GearedMotor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_getSceneNode(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  SWIG_check_num_args("getSceneNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSceneNode",1,"Car *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_getSceneNode",1,SWIGTYPE_p_Car);
  }
  
  result = (Ogre::SceneNode *)(arg1)->getSceneNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Ogre__SceneNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_updateSoundEffects(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("updateSoundEffects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateSoundEffects",1,"Car *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("updateSoundEffects",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_updateSoundEffects",1,SWIGTYPE_p_Car);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  (arg1)->updateSoundEffects(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Car_handleCollisionEvent(lua_State* L) {
  int SWIG_arg = 0;
  Car *arg1 = (Car *) 0 ;
  opal::CollisionEvent *arg2 = 0 ;
  
  SWIG_check_num_args("handleCollisionEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("handleCollisionEvent",1,"Car *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("handleCollisionEvent",2,"opal::CollisionEvent const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Car,0))){
    SWIG_fail_ptr("Car_handleCollisionEvent",1,SWIGTYPE_p_Car);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_opal__CollisionEvent,0))){
    SWIG_fail_ptr("Car_handleCollisionEvent",2,SWIGTYPE_p_opal__CollisionEvent);
  }
  
  (arg1)->handleCollisionEvent((opal::CollisionEvent const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Car(void *obj) {
Car *arg1 = (Car *) obj;
delete arg1;
}
static swig_lua_method swig_Car_methods[] = {
    {"init", _wrap_Car_init}, 
    {"forward", _wrap_Car_forward}, 
    {"reverse", _wrap_Car_reverse}, 
    {"idle", _wrap_Car_idle}, 
    {"setThrottle", _wrap_Car_setThrottle}, 
    {"steerLeft", _wrap_Car_steerLeft}, 
    {"steerRight", _wrap_Car_steerRight}, 
    {"setSteering", _wrap_Car_setSteering}, 
    {"getChassis", _wrap_Car_getChassis}, 
    {"getFLMotor", _wrap_Car_getFLMotor}, 
    {"getFRMotor", _wrap_Car_getFRMotor}, 
    {"getSceneNode", _wrap_Car_getSceneNode}, 
    {"updateSoundEffects", _wrap_Car_updateSoundEffects}, 
    {"handleCollisionEvent", _wrap_Car_handleCollisionEvent}, 
    {0,0}
};
static swig_lua_attribute swig_Car_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Car_bases[] = {0,0};
static const char *swig_Car_base_names[] = {"opal::CollisionEventHandler *",0};
static swig_lua_class _wrap_class_Car = { "Car", &SWIGTYPE_p_Car,_wrap_new_Car, swig_delete_Car, swig_Car_methods, swig_Car_attributes, swig_Car_bases, swig_Car_base_names };

static int _wrap_new_Robot(lua_State* L) {
  int SWIG_arg = 0;
  SimulationEngine *arg1 = 0 ;
  verve::real arg2 ;
  Robot *result = 0 ;
  
  SWIG_check_num_args("Robot",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Robot",1,"SimulationEngine &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Robot",2,"verve::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SimulationEngine,0))){
    SWIG_fail_ptr("new_Robot",1,SWIGTYPE_p_SimulationEngine);
  }
  
  arg2 = (verve::real)lua_tonumber(L, 2);
  result = (Robot *)new Robot(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Robot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  opal::Matrix44r *arg5 = 0 ;
  opal::real arg6 ;
  
  SWIG_check_num_args("init",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Robot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("init",5,"opal::Matrix44r const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("init",6,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_init",1,SWIGTYPE_p_Robot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_opal__Matrix44r,0))){
    SWIG_fail_ptr("Robot_init",5,SWIGTYPE_p_opal__Matrix44r);
  }
  
  arg6 = (opal::real)lua_tonumber(L, 6);
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4,(opal::Matrix44r const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  opal::Matrix44r *arg5 = 0 ;
  
  SWIG_check_num_args("init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Robot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("init",5,"opal::Matrix44r const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_init",1,SWIGTYPE_p_Robot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_opal__Matrix44r,0))){
    SWIG_fail_ptr("Robot_init",5,SWIGTYPE_p_opal__Matrix44r);
  }
  
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4,(opal::Matrix44r const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  opal::real arg4 ;
  
  SWIG_check_num_args("init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Robot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("init",4,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_init",1,SWIGTYPE_p_Robot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (opal::real)lua_tonumber(L, 4);
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_init__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("init",1,"Robot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("init",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("init",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_init",1,SWIGTYPE_p_Robot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Robot_init",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_init(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Robot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Robot_init__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Robot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Robot_init__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Robot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_opal__Matrix44r, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Robot_init__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Robot, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_opal__Matrix44r, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Robot_init__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Robot_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    init(Robot *,std::string const &,std::string const &,opal::real,opal::Matrix44r const &,opal::real)\n"
    "    init(Robot *,std::string const &,std::string const &,opal::real,opal::Matrix44r const &)\n"
    "    init(Robot *,std::string const &,std::string const &,opal::real)\n"
    "    init(Robot *,std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Robot_randomizeState(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  
  SWIG_check_num_args("randomizeState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randomizeState",1,"Robot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_randomizeState",1,SWIGTYPE_p_Robot);
  }
  
  (arg1)->randomizeState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_getCurrentActionName(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  std::string result;
  
  SWIG_check_num_args("getCurrentActionName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCurrentActionName",1,"Robot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_getCurrentActionName",1,SWIGTYPE_p_Robot);
  }
  
  result = ((Robot const *)arg1)->getCurrentActionName();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Robot_updateVisuals(lua_State* L) {
  int SWIG_arg = 0;
  Robot *arg1 = (Robot *) 0 ;
  opal::real arg2 ;
  
  SWIG_check_num_args("updateVisuals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateVisuals",1,"Robot *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("updateVisuals",2,"opal::real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Robot,0))){
    SWIG_fail_ptr("Robot_updateVisuals",1,SWIGTYPE_p_Robot);
  }
  
  arg2 = (opal::real)lua_tonumber(L, 2);
  (arg1)->updateVisuals(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Robot(void *obj) {
Robot *arg1 = (Robot *) obj;
delete arg1;
}
static swig_lua_method swig_Robot_methods[] = {
    {"init", _wrap_Robot_init}, 
    {"randomizeState", _wrap_Robot_randomizeState}, 
    {"getCurrentActionName", _wrap_Robot_getCurrentActionName}, 
    {"updateVisuals", _wrap_Robot_updateVisuals}, 
    {0,0}
};
static swig_lua_attribute swig_Robot_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Robot_bases[] = {0,0,0};
static const char *swig_Robot_base_names[] = {"LearningEntity *","Car *",0};
static swig_lua_class _wrap_class_Robot = { "Robot", &SWIGTYPE_p_Robot,_wrap_new_Robot, swig_delete_Robot, swig_Robot_methods, swig_Robot_attributes, swig_Robot_bases, swig_Robot_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "degToRad", _wrap_degToRad},
    { "radToDeg", _wrap_radToDeg},
    { "abs", _wrap_abs},
    { "areEqual", _wrap_areEqual},
    { "normalizeDegrees", _wrap_normalizeDegrees},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "OPAL_PI", _wrap_OPAL_PI_get, SWIG_Lua_set_immutable },
    { "OPAL_HALF_PI", _wrap_OPAL_HALF_PI_get, SWIG_Lua_set_immutable },
    { "OPAL_ONE_THIRD", _wrap_OPAL_ONE_THIRD_get, SWIG_Lua_set_immutable },
    { "OPAL_EPSILON", _wrap_OPAL_EPSILON_get, SWIG_Lua_set_immutable },
    { "VERVE_E", _wrap_VERVE_E_get, SWIG_Lua_set_immutable },
    { "stepSize", _wrap_stepSize_get, SWIG_Lua_set_immutable },
    { "eTraceTimeConstant", _wrap_eTraceTimeConstant_get, SWIG_Lua_set_immutable },
    { "TDDiscountTimeConstant", _wrap_TDDiscountTimeConstant_get, SWIG_Lua_set_immutable },
    { "valueFunctionLearningTimeConstant", _wrap_valueFunctionLearningTimeConstant_get, SWIG_Lua_set_immutable },
    { "policyLearningMultiplier", _wrap_policyLearningMultiplier_get, SWIG_Lua_set_immutable },
    { "modelLearningTimeConstant", _wrap_modelLearningTimeConstant_get, SWIG_Lua_set_immutable },
    { "activeETraceThreshold", _wrap_activeETraceThreshold_get, SWIG_Lua_set_immutable },
    { "minActionSelectionProb", _wrap_minActionSelectionProb_get, SWIG_Lua_set_immutable },
    { "agentArchitecture", _wrap_agentArchitecture_get, SWIG_Lua_set_immutable },
    { "maxNumPlanningSteps", _wrap_maxNumPlanningSteps_get, SWIG_Lua_set_immutable },
    { "planningUncertaintyThreshold", _wrap_planningUncertaintyThreshold_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"OGRE_PLATFORM_WIN32", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_PLATFORM_LINUX", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_PLATFORM_APPLE", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_COMPILER_MSVC", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_COMPILER_GNUC", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_COMPILER_BORL", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ENDIAN_LITTLE", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ENDIAN_BIG", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ARCHITECTURE_32", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ARCHITECTURE_64", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_PLATFORM", (long) 2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ARCH_TYPE", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_DEBUG_MODE", (long) 0, 0, 0, 0},
{ SWIG_LUA_STRING,  (char *)"OGRE_PLATFORM_LIB", 0, 0, (void *)"libOgrePlatform.so", 0},
{ SWIG_LUA_INT,     (char *)"OGRE_UNICODE_SUPPORT", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"OGRE_ENDIAN", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RL", (long) verve::RL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MODEL_RL", (long) verve::MODEL_RL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"CURIOUS_MODEL_RL", (long) verve::CURIOUS_MODEL_RL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SimulationEngine_SIMULATE_CONSTANT_CHUNK", (long) SimulationEngine::SIMULATE_CONSTANT_CHUNK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SimulationEngine_SIMULATE_REAL_TIME_MULTIPLE", (long) SimulationEngine::SIMULATE_REAL_TIME_MULTIPLE, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SimulationEngineTo_p_Ogre__FrameListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Ogre::FrameListener *)  ((SimulationEngine *) x));
}
static void *_p_opal__CollisionEventHandlerTo_p_opal__EventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opal::EventHandler *)  ((opal::CollisionEventHandler *) x));
}
static void *_p_RobotTo_p_opal__EventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opal::EventHandler *) (opal::CollisionEventHandler *)(Car *) ((Robot *) x));
}
static void *_p_CarTo_p_opal__EventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opal::EventHandler *) (opal::CollisionEventHandler *) ((Car *) x));
}
static void *_p_RobotTo_p_opal__CollisionEventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opal::CollisionEventHandler *) (Car *) ((Robot *) x));
}
static void *_p_CarTo_p_opal__CollisionEventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((opal::CollisionEventHandler *)  ((Car *) x));
}
static void *_p_RobotTo_p_Car(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Car *)  ((Robot *) x));
}
static void *_p_RobotTo_p_LearningEntity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LearningEntity *)  ((Robot *) x));
}
static swig_type_info _swigt__p_AgentVisualDebugger = {"_p_AgentVisualDebugger", "AgentVisualDebugger *", 0, 0, (void*)&_wrap_class_AgentVisualDebugger, 0};
static swig_type_info _swigt__p_Car = {"_p_Car", "Car *", 0, 0, (void*)&_wrap_class_Car, 0};
static swig_type_info _swigt__p_LearningEntity = {"_p_LearningEntity", "LearningEntity *", 0, 0, (void*)&_wrap_class_LearningEntity, 0};
static swig_type_info _swigt__p_OIS__Keyboard = {"_p_OIS__Keyboard", "OIS::Keyboard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OIS__Mouse = {"_p_OIS__Mouse", "OIS::Mouse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__FrameEvent = {"_p_Ogre__FrameEvent", "Ogre::FrameEvent *", 0, 0, (void*)&_wrap_class_Ogre_FrameEvent, 0};
static swig_type_info _swigt__p_Ogre__FrameListener = {"_p_Ogre__FrameListener", "Ogre::FrameListener *", 0, 0, (void*)&_wrap_class_Ogre_FrameListener, 0};
static swig_type_info _swigt__p_Ogre__SceneManager = {"_p_Ogre__SceneManager", "Ogre::SceneManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__SceneNode = {"_p_Ogre__SceneNode", "Ogre::SceneNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PhysicalCamera = {"_p_PhysicalCamera", "PhysicalCamera *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PhysicalCamera__Type = {"_p_PhysicalCamera__Type", "PhysicalCamera::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PhysicalEntity = {"_p_PhysicalEntity", "PhysicalEntity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Point3r = {"_p_Point3r", "Point3r *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Robot = {"_p_Robot", "Robot *", 0, 0, (void*)&_wrap_class_Robot, 0};
static swig_type_info _swigt__p_SimulationEngine = {"_p_SimulationEngine", "SimulationEngine *", 0, 0, (void*)&_wrap_class_SimulationEngine, 0};
static swig_type_info _swigt__p_Vec3r = {"_p_Vec3r", "Vec3r *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "verve::real *|opal::real *|float *|Ogre::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opal__CollisionEvent = {"_p_opal__CollisionEvent", "opal::CollisionEvent *", 0, 0, (void*)&_wrap_class_opal_CollisionEvent, 0};
static swig_type_info _swigt__p_opal__CollisionEventHandler = {"_p_opal__CollisionEventHandler", "opal::CollisionEventHandler *", 0, 0, (void*)&_wrap_class_opal_CollisionEventHandler, 0};
static swig_type_info _swigt__p_opal__EventHandler = {"_p_opal__EventHandler", "opal::EventHandler *", 0, 0, (void*)&_wrap_class_opal_EventHandler, 0};
static swig_type_info _swigt__p_opal__GearedMotor = {"_p_opal__GearedMotor", "opal::GearedMotor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opal__Matrix44r = {"_p_opal__Matrix44r", "opal::Matrix44r *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opal__Point3r = {"_p_opal__Point3r", "opal::Point3r *", 0, 0, (void*)&_wrap_class_opal_Point3r, 0};
static swig_type_info _swigt__p_opal__Simulator = {"_p_opal__Simulator", "opal::Simulator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opal__Solid = {"_p_opal__Solid", "opal::Solid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_opal__Vec3r = {"_p_opal__Vec3r", "opal::Vec3r *", 0, 0, (void*)&_wrap_class_opal_Vec3r, 0};
static swig_type_info _swigt__p_real = {"_p_real", "real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Ogre::uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "Ogre::uint32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Ogre::uint16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_verve__Agent = {"_p_verve__Agent", "verve::Agent *", 0, 0, (void*)&_wrap_class_verve_Agent, 0};
static swig_type_info _swigt__p_verve__AgentDebugData = {"_p_verve__AgentDebugData", "verve::AgentDebugData *", 0, 0, (void*)&_wrap_class_verve_AgentDebugData, 0};
static swig_type_info _swigt__p_verve__AgentDescriptor = {"_p_verve__AgentDescriptor", "verve::AgentDescriptor *", 0, 0, (void*)&_wrap_class_verve_AgentDescriptor, 0};
static swig_type_info _swigt__p_verve__ContinuousSensorDescriptor = {"_p_verve__ContinuousSensorDescriptor", "verve::ContinuousSensorDescriptor *", 0, 0, (void*)&_wrap_class_verve_ContinuousSensorDescriptor, 0};
static swig_type_info _swigt__p_verve__DiscreteSensorDescriptor = {"_p_verve__DiscreteSensorDescriptor", "verve::DiscreteSensorDescriptor *", 0, 0, (void*)&_wrap_class_verve_DiscreteSensorDescriptor, 0};
static swig_type_info _swigt__p_verve__Observation = {"_p_verve__Observation", "verve::Observation *", 0, 0, (void*)&_wrap_class_verve_Observation, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AgentVisualDebugger,
  &_swigt__p_Car,
  &_swigt__p_LearningEntity,
  &_swigt__p_OIS__Keyboard,
  &_swigt__p_OIS__Mouse,
  &_swigt__p_Ogre__FrameEvent,
  &_swigt__p_Ogre__FrameListener,
  &_swigt__p_Ogre__SceneManager,
  &_swigt__p_Ogre__SceneNode,
  &_swigt__p_PhysicalCamera,
  &_swigt__p_PhysicalCamera__Type,
  &_swigt__p_PhysicalEntity,
  &_swigt__p_Point3r,
  &_swigt__p_Robot,
  &_swigt__p_SimulationEngine,
  &_swigt__p_Vec3r,
  &_swigt__p_bool,
  &_swigt__p_float,
  &_swigt__p_opal__CollisionEvent,
  &_swigt__p_opal__CollisionEventHandler,
  &_swigt__p_opal__EventHandler,
  &_swigt__p_opal__GearedMotor,
  &_swigt__p_opal__Matrix44r,
  &_swigt__p_opal__Point3r,
  &_swigt__p_opal__Simulator,
  &_swigt__p_opal__Solid,
  &_swigt__p_opal__Vec3r,
  &_swigt__p_real,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_verve__Agent,
  &_swigt__p_verve__AgentDebugData,
  &_swigt__p_verve__AgentDescriptor,
  &_swigt__p_verve__ContinuousSensorDescriptor,
  &_swigt__p_verve__DiscreteSensorDescriptor,
  &_swigt__p_verve__Observation,
};

static swig_cast_info _swigc__p_AgentVisualDebugger[] = {  {&_swigt__p_AgentVisualDebugger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Car[] = {  {&_swigt__p_Car, 0, 0, 0},  {&_swigt__p_Robot, _p_RobotTo_p_Car, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LearningEntity[] = {  {&_swigt__p_LearningEntity, 0, 0, 0},  {&_swigt__p_Robot, _p_RobotTo_p_LearningEntity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OIS__Keyboard[] = {  {&_swigt__p_OIS__Keyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OIS__Mouse[] = {  {&_swigt__p_OIS__Mouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__FrameEvent[] = {  {&_swigt__p_Ogre__FrameEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__FrameListener[] = {  {&_swigt__p_SimulationEngine, _p_SimulationEngineTo_p_Ogre__FrameListener, 0, 0},  {&_swigt__p_Ogre__FrameListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneManager[] = {  {&_swigt__p_Ogre__SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneNode[] = {  {&_swigt__p_Ogre__SceneNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhysicalCamera[] = {  {&_swigt__p_PhysicalCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhysicalCamera__Type[] = {  {&_swigt__p_PhysicalCamera__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PhysicalEntity[] = {  {&_swigt__p_PhysicalEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Point3r[] = {  {&_swigt__p_Point3r, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Robot[] = {  {&_swigt__p_Robot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimulationEngine[] = {  {&_swigt__p_SimulationEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3r[] = {  {&_swigt__p_Vec3r, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__CollisionEvent[] = {  {&_swigt__p_opal__CollisionEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__CollisionEventHandler[] = {  {&_swigt__p_Car, _p_CarTo_p_opal__CollisionEventHandler, 0, 0},  {&_swigt__p_opal__CollisionEventHandler, 0, 0, 0},  {&_swigt__p_Robot, _p_RobotTo_p_opal__CollisionEventHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__EventHandler[] = {  {&_swigt__p_Car, _p_CarTo_p_opal__EventHandler, 0, 0},  {&_swigt__p_opal__EventHandler, 0, 0, 0},  {&_swigt__p_opal__CollisionEventHandler, _p_opal__CollisionEventHandlerTo_p_opal__EventHandler, 0, 0},  {&_swigt__p_Robot, _p_RobotTo_p_opal__EventHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__GearedMotor[] = {  {&_swigt__p_opal__GearedMotor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__Matrix44r[] = {  {&_swigt__p_opal__Matrix44r, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__Point3r[] = {  {&_swigt__p_opal__Point3r, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__Simulator[] = {  {&_swigt__p_opal__Simulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__Solid[] = {  {&_swigt__p_opal__Solid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_opal__Vec3r[] = {  {&_swigt__p_opal__Vec3r, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real[] = {  {&_swigt__p_real, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__Agent[] = {  {&_swigt__p_verve__Agent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__AgentDebugData[] = {  {&_swigt__p_verve__AgentDebugData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__AgentDescriptor[] = {  {&_swigt__p_verve__AgentDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__ContinuousSensorDescriptor[] = {  {&_swigt__p_verve__ContinuousSensorDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__DiscreteSensorDescriptor[] = {  {&_swigt__p_verve__DiscreteSensorDescriptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_verve__Observation[] = {  {&_swigt__p_verve__Observation, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AgentVisualDebugger,
  _swigc__p_Car,
  _swigc__p_LearningEntity,
  _swigc__p_OIS__Keyboard,
  _swigc__p_OIS__Mouse,
  _swigc__p_Ogre__FrameEvent,
  _swigc__p_Ogre__FrameListener,
  _swigc__p_Ogre__SceneManager,
  _swigc__p_Ogre__SceneNode,
  _swigc__p_PhysicalCamera,
  _swigc__p_PhysicalCamera__Type,
  _swigc__p_PhysicalEntity,
  _swigc__p_Point3r,
  _swigc__p_Robot,
  _swigc__p_SimulationEngine,
  _swigc__p_Vec3r,
  _swigc__p_bool,
  _swigc__p_float,
  _swigc__p_opal__CollisionEvent,
  _swigc__p_opal__CollisionEventHandler,
  _swigc__p_opal__EventHandler,
  _swigc__p_opal__GearedMotor,
  _swigc__p_opal__Matrix44r,
  _swigc__p_opal__Point3r,
  _swigc__p_opal__Simulator,
  _swigc__p_opal__Solid,
  _swigc__p_opal__Vec3r,
  _swigc__p_real,
  _swigc__p_std__string,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_verve__Agent,
  _swigc__p_verve__AgentDebugData,
  _swigc__p_verve__AgentDescriptor,
  _swigc__p_verve__ContinuousSensorDescriptor,
  _swigc__p_verve__DiscreteSensorDescriptor,
  _swigc__p_verve__Observation,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

